{"version":3,"file":"static/js/4.chunk.js","sources":["/var/www/osm/clientApp/src/admin/Hook.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Field, Reference } from '../common/FormControls'\nimport { TowelRecord } from '../lib/API'\nimport { ITHQWindowNamespace } from '../typings'\nimport { Monaco } from '../common/Monaco'\nimport { IRefUpdate } from '../common/FormControls/Reference'\n// const Monaco = React.lazy(() => import('./../common/Monaco'))\n// import * as monaco from 'monaco-editor'\n\n// Handle pesky window types\ndeclare global {\n  interface Window {\n    MonacoEnvironment: any\n    $: JQuery\n    THQ: ITHQWindowNamespace\n    monaco: any\n  }\n}\n\nexport default function Hook(props: any) {\n  const [hookInfo, setHookInfo] = React.useState({\n    hook: '',\n    hook_table: '',\n    sys_id: props.match.params.id,\n    table: 'sys_db_hook',\n    description: '',\n    hook_table_display: '',\n    code: `#!/bin/env/node\n/**\n * Script hook for {HOOK GOES HERE} on table {TABLE NAME GOES HERE}\n * \n * The Towel API should provide everything that is needed to verify any fields.\n * Documentation can be found at /public/docs/Towel.md\n * \n * Please follow best practices when coding, making sure to use JSDOC comments\n * whenever possible. JSDOC documentation can be found at https://devdocs.io/jsdoc/\n * \n * NOTE: This script will run in an isolated environment. You cannot call on any\n * standard node modules or NPM modules. This script will be called using the Function()\n * constructor and will be passed the folowing 2 parameters:\n * \n * @param {string} sysId The ID of the record being modified\n * @param {object} incomingFields The fields that are in the request body (if applicable)\n * \n * If this function throws any errors, the request will be aborted and returned to the client\n * with an error 500 response. This function should return an object with the following keys:\n * \n * @returns {status: string, confirmedFields: object, warnings: object | object[]}\n */\nvar Towel = require('./../towel')\n\nmodule.exports = function(sysId, action, incomingFields) {\n  this.status = 'OK'\n  this.confirmedFields = {...incomingFields}\n  this.warnings = []\n\n  // Do stuff\n\n  return this\n}\n`\n  })\n\n  const getData = () => {\n    new TowelRecord(hookInfo.table)\n      .get({\n        fields: 'hook_table,hook,code,description,sys_id,hook_table_display',\n        id: hookInfo.sys_id\n      })\n      .then((res: any) => {\n        if (res && res.data && res.data[hookInfo.table]) {\n          const state: any = { ...hookInfo }\n          for (const field in res.data[hookInfo.table]) {\n            // if (field === 'code') {\n            //   window.monaco.editor\n            //     .getModels()[0]\n            //     .setValue(res.data[hookInfo.table][field])\n            //   state[field] = res.data[hookInfo.table][field]\n            // } else {\n            if (res.data[hookInfo.table][field]) {\n              state[field] = res.data[hookInfo.table][field]\n            }\n            // }\n          }\n          setHookInfo(state)\n        }\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }\n\n  const handleChange = (e: React.ChangeEvent) => {\n    if (e.target instanceof HTMLInputElement) {\n      const state: any = { ...hookInfo }\n      state[e.target.name] = e.target.value\n      setHookInfo(state)\n      // setHookInfo({ [e.target.name]: e.target.value })\n    }\n  }\n\n  const setReference = (updatedRef: IRefUpdate): void => {\n    const state: any = { ...hookInfo }\n    state[updatedRef.field] = updatedRef.newValue\n    setHookInfo(state)\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    let TowelQuery\n    if (props.match.params.id === 'new') {\n      TowelQuery = new TowelRecord('sys_db_hook').create(\n        {\n          description: hookInfo.description,\n          hook_table: hookInfo.hook_table,\n          hook: hookInfo.hook,\n          code: getEditorValue()\n        },\n        'hook_table,hook,code,description,sys_id'\n      )\n    } else {\n      TowelQuery = new TowelRecord('sys_db_hook').update(\n        props.match.params.id,\n        {\n          description: hookInfo.description,\n          hook_table: hookInfo.hook_table,\n          hook: hookInfo.hook,\n          code: getEditorValue()\n        }\n      )\n    }\n    TowelQuery.then((res: any) => {\n      if (res.okay() || res.status === 204) {\n        console.log('Created or updated')\n      }\n    }).catch((err) => {\n      console.error(err)\n    })\n  }\n  const getEditorValue = () => {\n    return window.monaco.editor.getModels()[0].getValue()\n  }\n\n  React.useEffect(() => {\n    if (props.match.params.id !== 'new') getData()\n  }, [])\n\n  return (\n    <form className='row'>\n      <div className='col' />\n      <div className='col-lg-10 col-md-8 mt-4'>\n        <button className='btn btn-primary float-right' onClick={handleSubmit}>\n          Save\n        </button>\n        <h4>Hook</h4>\n        <hr />\n        <div className='row'>\n          <Field\n            id='description'\n            type='text'\n            name='description'\n            onChange={handleChange}\n            value={hookInfo.description}\n            className='col-lg-6 col-md-12'\n            label='Description'\n          />\n          <Reference\n            id='hook_table'\n            name='hook_table'\n            label='Table'\n            value={hookInfo.hook_table}\n            display={hookInfo.hook_table_display}\n            setReference={setReference}\n            className='col-lg-6 col-md-12'\n            references='sys_db_object'\n          />\n          <Field\n            id='hook'\n            name='hook'\n            type='text'\n            onChange={handleChange}\n            value={hookInfo.hook}\n            className='col-lg-6 col-md-12'\n            label='Hook'\n          />\n          {hookInfo.code && <Monaco value={hookInfo.code} />}\n        </div>\n      </div>\n      <div className='col' />\n    </form>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAeA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AACA;AA2CA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;A","sourceRoot":""}