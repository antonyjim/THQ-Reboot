{"version":3,"file":"static/js/main.chunk.js","sources":["/var/www/osm/clientApp/src/App.tsx","/var/www/osm/clientApp/src/admin/Customer.tsx","/var/www/osm/clientApp/src/common/Alerts.tsx","/var/www/osm/clientApp/src/common/Can.tsx","/var/www/osm/clientApp/src/common/ContextMenu.tsx","/var/www/osm/clientApp/src/common/Errors.tsx","/var/www/osm/clientApp/src/common/Footer.tsx","/var/www/osm/clientApp/src/common/FormControls/Checkbox.tsx","/var/www/osm/clientApp/src/common/FormControls/FileUpload.tsx","/var/www/osm/clientApp/src/common/FormControls/Reference.tsx","/var/www/osm/clientApp/src/common/FormControls/Select.tsx","/var/www/osm/clientApp/src/common/FormControls/TextField.tsx","/var/www/osm/clientApp/src/common/FormControls/index.tsx","/var/www/osm/clientApp/src/common/ListView.tsx","/var/www/osm/clientApp/src/common/Loading.tsx","/var/www/osm/clientApp/src/common/Monaco.tsx","/var/www/osm/clientApp/src/common/PillLayout.tsx","/var/www/osm/clientApp/src/common/SearchModal.tsx","/var/www/osm/clientApp/src/common/Table/Table.tsx","/var/www/osm/clientApp/src/common/Table/TableRow.tsx","/var/www/osm/clientApp/src/common/Table/TableSearch.tsx","/var/www/osm/clientApp/src/common/Table/index.tsx","/var/www/osm/clientApp/src/customComponents/FileExplorer/FileExplorerActions.tsx","/var/www/osm/clientApp/src/customComponents/FileExplorer/FileExplorerContainer.tsx","/var/www/osm/clientApp/src/customComponents/FileExplorer/FileExplorerFile.tsx","/var/www/osm/clientApp/src/customComponents/FileExplorer/FileExplorerFolder.tsx","/var/www/osm/clientApp/src/customComponents/Workspace.tsx","/var/www/osm/clientApp/src/forms/FieldForm.tsx","/var/www/osm/clientApp/src/forms/Form.tsx","/var/www/osm/clientApp/src/home/Dashboard.tsx","/var/www/osm/clientApp/src/home/Navigation.tsx","/var/www/osm/clientApp/src/index.css","/var/www/osm/clientApp/src/index.tsx","/var/www/osm/clientApp/src/lib/API.ts","/var/www/osm/clientApp/src/lib/formLoader.ts","/var/www/osm/clientApp/src/lib/getNavigation.ts","/var/www/osm/clientApp/src/lib/util.ts","/var/www/osm/clientApp/external \"React\"","/var/www/osm/clientApp/external \"ReactDOM\""],"sourcesContent":["import * as React from 'react'\nimport { Suspense } from 'react'\nimport { render } from 'react-dom'\n// import '@babel/polyfill'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport { Footer } from './common/Footer'\nimport { E404, ErrorBoundary } from './common/Errors'\nimport Customer from './admin/Customer'\nimport Navigation from './home/Navigation'\nimport Dashboard from './home/Dashboard'\nimport { TableList } from './common/ListView'\nimport Form from './forms/Form'\n// import $ from 'jquery'\nimport { ITHQWindowNamespace } from './typings'\nimport { Workspace } from './customComponents/Workspace'\n\nconst Admin = React.lazy(() => import('./admin/Admin'))\nconst UserProfile = React.lazy(() => import('./home/UserProfile'))\n\n// Handle pesky window types\ndeclare global {\n  interface Window {\n    MonacoEnvironment: any\n    $: JQuery\n    THQ: ITHQWindowNamespace\n    monaco: any\n    require: any\n  }\n}\n\n// Define helper functions/ components\n\nconst SuspenseLoader = (\n  <div className='jumbotron'>\n    <h1 className='display-4'>Loading...</h1>\n  </div>\n)\n\n// Get a new token from the server when the old one is less than 3 minutes from expiring\nconst refreshToken = () => {\n  const token = window.THQ.token\n  if (!token) {\n    window.location.href = '/auth/logout'\n  } else {\n    const details = JSON.parse(atob(token.split('.')[1]))\n    const diff = details.exp * 1000 - new Date().getTime()\n    if (diff < 300000) {\n      $.ajax('/api/refresh?token=' + token, {\n        success: (response) => {\n          if (response.token && !response.error) {\n            window.THQ.token = response.token\n            sessionStorage.setItem('token', response.token)\n          } else {\n            console.log(response)\n          }\n        },\n        error: (err) => {\n          window.location.href = '/auth/logout'\n        }\n      })\n    }\n  }\n}\n\n// Extract key / value pairs from query string\nconst qs = (key: string) => {\n  key = key.replace(/[*+?^$.\\[\\]{}()|\\\\\\/]/g, '\\\\$&') // escape RegEx meta chars\n  const match = location.search.match(\n    new RegExp('[?&]' + key + '=([^&]+)(&|$)')\n  )\n  return match && decodeURIComponent(match[1].replace(/\\+/g, ' '))\n}\n\nlet parsedAt: number = 0\n\nexport default function App() {\n  // Expect that a token will be in the query string\n  const token = qs('token')\n  const user = {\n    userId: null,\n    privs: []\n  }\n\n  window.THQ = { ...window.THQ, token, user }\n  if (token) {\n    // Remove the token from the query string\n    if (window.localStorage) {\n      window.localStorage.setItem('token', token)\n      window.history.pushState(\n        { loaded: true },\n        'Tire-HQ',\n        window.location.pathname\n      )\n    }\n  } else {\n    if (window.localStorage) {\n      // Default to looking for the token in session storage\n      window.THQ.token = localStorage.getItem('token')\n      // window.history.pushState({ loaded: true }, 'Tire-HQ', '/')\n      if (!window.THQ.token) {\n        window.location.href = '/auth/logout'\n      }\n    }\n  }\n  setInterval(refreshToken, 300000)\n  if (window.THQ.loadingInterval) {\n    clearInterval(window.THQ.loadingInterval)\n    const container = document.getElementById('loading-container')\n    const loadingContainer = document.getElementById('loading-container')\n    if (container && container.parentElement && loadingContainer) {\n      container.parentElement.removeChild(loadingContainer)\n    }\n  }\n  return (\n    <ErrorBoundary>\n      <Router>\n        <>\n          <div className='fill'>\n            <Navigation />\n            <ErrorBoundary>\n              <Suspense fallback={SuspenseLoader}>\n                <Switch>\n                  <Route exact path='/' component={Dashboard} />\n                  <Route path='/profile' component={UserProfile} />\n                  <Route\n                    path='/admin/'\n                    component={(props: any) => <Admin {...props} />}\n                  />\n                  <Route path='/customer/:customer' component={Customer} />\n                  <Route path='/t/:table' component={TableList} />\n                  <Route path='/f/:table/:id' component={Form} />\n                  <Route path='/c/:componentTitle' component={Workspace} />\n                  <Route component={E404} />\n                </Switch>\n              </Suspense>\n            </ErrorBoundary>\n          </div>\n          <Footer />\n        </>\n      </Router>\n    </ErrorBoundary>\n  )\n}\n\nparsedAt = performance.now()\nconsole.log(\n  'Calling render DOM %s milliseconds after pageload',\n  parsedAt - (window.THQ.pageLoad || performance.now())\n)\n\n// if ('serviceWorker' in navigator) {\n//   navigator.serviceWorker\n//     .register('/public/sw.js', { scope: '/public/' })\n//     .then((reg) => {\n//       console.log('Registration succeeded with scope ' + reg.scope)\n//     })\n//     .catch((err) => {\n//       console.error('Serviceworker registration failed with error ' + err)\n//     })\n// }\nrender(<App />, document.querySelector('#root'))\n","import * as React from 'react'\nimport { Component } from 'react'\nimport Pills from '../common/PillLayout'\nimport API from '../lib/API'\nimport Table from '../common/Table'\nimport { Checkbox, Field } from '../common/FormControls'\n\nexport default class Customer extends Component<any, any> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      error: false,\n      errorMessage: '',\n      loaded: false,\n      fields: {},\n      modifiedFields: [],\n      customer: props.id\n    }\n    if (this.props.id !== 'new') this.getCustomer()\n  }\n\n  private getCustomer() {\n    API.get({\n      path: '/api/q/sys_customer/' + this.state.customer,\n      query: {\n        fields:\n          'nonsig,nsTradeStyle,nsAddr1,nsAddr2,nsState,nsCity,nsPostalCode,nsCountry,active,active_thq,nsType'\n      }\n    })\n      .then((response: any) => {\n        if (response.errors.length > 0) {\n          this.setState({\n            error: true,\n            errorMessage: response.errors[0].message,\n            loaded: true\n          })\n        } else {\n          this.setState({ fields: response.data.sys_customer, loaded: true })\n        }\n      })\n      .catch((e: Error) => {\n        this.setState({ error: true, errorMessage: e.message, loaded: true })\n      })\n  }\n\n  private handleChange(e: React.ChangeEvent) {\n    if (e.target instanceof HTMLInputElement) {\n      const state = { ...this.state }\n      state.fields[e.target.id] = e.target.value\n      this.setState(state)\n    }\n  }\n\n  private handleSubmit() {\n    console.log('Submitted')\n  }\n\n  public render() {\n    const pills = {\n      general: {\n        id: 'general',\n        label: 'General',\n        body: (\n          <>\n            <button\n              className='btn btn-primary float-right'\n              onClick={this.handleSubmit}\n            >\n              Save\n            </button>\n            <h4>General Information</h4>\n            <hr />\n            <form className='form-row' name='generalInformation'>\n              <Field\n                id='nonsig'\n                name='nonsig'\n                type='text'\n                value={this.state.fields.nonsig}\n                label='Nonsig'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsTradeStyle'\n                name='nsTradeStyle'\n                type='text'\n                value={this.state.fields.nsTradeStyle}\n                label='Tradestyle'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsAddr1'\n                name='nsAddr1'\n                type='text'\n                value={this.state.fields.nsAddr1}\n                label='Address'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsAddr2'\n                name='nsAddr2'\n                type='text'\n                value={this.state.fields.nsAddr2}\n                label='Address (2)'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsCity'\n                name='nsCity'\n                type='text'\n                value={this.state.fields.nsCity}\n                label='City'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsState'\n                name='nsState'\n                type='text'\n                value={this.state.fields.nsState}\n                label='State'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsPostalCode'\n                name='nsPostalCode'\n                type='text'\n                value={this.state.fields.nsPostalCode}\n                label='Postal Code'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsCountry'\n                name='nsPostalCode'\n                type='text'\n                value={this.state.fields.nsCountry}\n                label='Country'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Field\n                id='nsType'\n                name='nsType'\n                type='text'\n                value={this.state.fields.nsType}\n                label='Type'\n                className='col-lg-6 col-md-12'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Checkbox\n                id='nsIsActive'\n                name='nsIsActive'\n                checked={this.state.fields.nsIsActive}\n                label='Active'\n                onChange={this.handleChange.bind(this)}\n              />\n              <Checkbox\n                id='nsIsActiveTHQ'\n                name='nsIsActiveTHQ'\n                checked={this.state.fields.nsIsActiveTHQ}\n                label='Active in Tire-HQ'\n                onChange={this.handleChange.bind(this)}\n              />\n            </form>\n          </>\n        )\n      },\n      users: {\n        id: 'users',\n        label: 'Users',\n        body: (\n          <>\n            <h4>Users</h4>\n            <hr />\n            <p> View users associated with this customer. </p>\n            <Table\n              table='sys_user_list'\n              args={{ userDefaultNonsig: this.state.customer }}\n              cols={[\n                'sys_id',\n                'userFirstName',\n                'userLastName',\n                'userLastLogin',\n                'userDefaultNonsig',\n                'email'\n              ]}\n            />\n          </>\n        )\n      },\n      brands: {\n        id: 'brands',\n        label: 'Brands',\n        body: (\n          <>\n            <h4>Brands</h4>\n            <hr />\n          </>\n        )\n      },\n      logs: {\n        id: 'logs',\n        label: 'History',\n        body: (\n          <>\n            <h4>History</h4>\n            <hr />\n            <p>View actions that have been taken on this customer</p>\n          </>\n        )\n      }\n    }\n    return (\n      <>\n        {this.state.loaded ||\n          (this.state.customer === 'new' && (\n            <Pills pills={pills} {...this.state} />\n          ))}\n      </>\n    )\n  }\n}\n","import * as React from 'react'\n\ntype AlertTypes = 'danger' | 'warning' | 'success' | 'info'\n\ninterface IAlert {\n  message: string\n  alertType?: AlertTypes\n  dismissable?: boolean\n}\n\n/**\n * Renders a bootstrap alert\n * @param props Options for alerts\n */\nfunction Alert(props: IAlert): JSX.Element {\n  const dismissable: boolean = props.dismissable || true\n  const alertType = props.alertType || 'danger'\n  if (typeof props.message === 'string') {\n    return (\n      <div\n        className={\n          'alert fade show alert-' +\n          alertType +\n          (dismissable ? ' alert-dismissible' + alertType : '')\n        }\n        role='alert'\n      >\n        {props.message}\n        {dismissable && (\n          <button\n            type='button'\n            className='close'\n            data-dismiss='alert'\n            aria-label='Close'\n          >\n            <span aria-hidden='true'>&times;</span>\n          </button>\n        )}\n      </div>\n    )\n  } else {\n    return <></>\n  }\n}\n\nexport { Alert }\n","import * as React from 'react'\nimport { ITHQWindowNamespace } from '../typings'\ninterface ICanProps {\n  if?: boolean\n  role?: string\n}\n\ndeclare global {\n  interface Window {\n    MonacoEnvironment: any\n    $: JQuery\n    THQ: ITHQWindowNamespace\n  }\n}\n\nfunction Can(props: React.PropsWithChildren<ICanProps>) {\n  let privs: string[] = window.THQ.user.privs || []\n\n  if (window.THQ.user.privs && window.THQ.user.privs.length === 0) {\n    document.addEventListener('thq.receivedNav', (e) => {\n      privs = window.THQ.user.privs\n    })\n  }\n\n  function validate() {\n    if (props.role && privs && privs.indexOf(props.role) > -1) {\n      return true\n    } else if (props.if) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  if (validate()) {\n    return <>{props.children}</>\n  } else {\n    return null\n  }\n}\n\nexport { Can }\n","import * as React from 'react'\nimport jQuery from 'jquery'\n\nexport interface IContextMenuProps {\n  options?: [\n    {\n      text: string\n      action: React.MouseEventHandler\n    }\n  ]\n  location?: {\n    x: number\n    y: number\n  }\n  show?: boolean\n  originalTarget?: HTMLElement\n}\n\nexport function ContextMenu(props: IContextMenuProps) {\n  const opts: JSX.Element[] = []\n  const [shown, setShown] = React.useState(props.show || false)\n  const menuRef = React.useRef(null)\n  const cancelContext = (e: MouseEvent | React.FocusEvent) => {\n    if (e.target !== menuRef.current) setShown(false)\n  }\n\n  React.useEffect(() => {\n    console.log('Calling effect')\n    document.addEventListener('click', cancelContext, false)\n    return () => {\n      document.removeEventListener('click', cancelContext, false)\n    }\n  })\n\n  React.useEffect(() => {\n    setShown(props.show || false)\n  }, [props.show])\n\n  if (props.options) {\n    props.options.map((opt, i) => {\n      opts.push(\n        <div\n          className='dropdown-item'\n          onClick={opt.action}\n          key={'context-' + i}\n        >\n          {opt.text}\n        </div>\n      )\n    })\n  }\n\n  return (\n    <>\n      {shown && props.location && (\n        <div\n          ref={menuRef}\n          className='dropdown-menu'\n          style={{\n            display: 'block',\n            left: props.location.x,\n            top: props.location.y\n          }}\n          tabIndex={0}\n          onBlur={cancelContext}\n        >\n          {opts}\n        </div>\n      )}\n    </>\n  )\n}\n","import * as React from 'react'\nimport { Component } from 'react'\ninterface IErrorBoundary {\n  hasError: boolean\n  error?: Error\n}\n\nfunction E404() {\n  return (\n    <div className='fof-cont mx-a'>\n      <div className='fof-title'>\n        <h1 className='error-code'>404</h1>\n      </div>\n      <div className='fof-desc'>\n        The page you were looking for could not be found.{' '}\n        <a href='/' className='404-home'>\n          Click here to go home\n        </a>\n      </div>\n    </div>\n  )\n}\n\nfunction E401() {\n  return (\n    <div className='fof-cont mx-a'>\n      <div className='fof-title'>\n        <h1 className='error-code'>401</h1>\n      </div>\n      <div className='fof-desc'>\n        You are unauthorized to view the requested page.{' '}\n        <a href='/' className='404-home'>\n          Click here to go home\n        </a>\n      </div>\n    </div>\n  )\n}\n\nclass ErrorBoundary extends Component<{}, IErrorBoundary> {\n  constructor(props: {}) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  public componentDidCatch(err: Error, info: any) {\n    this.setState({\n      hasError: true,\n      error: err\n    })\n    console.error(err, ' ', info)\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <div className='fof-cont mx-a'>\n          <div className='fof-title'>\n            <h1 className='error-code'>Fuck</h1>\n          </div>\n          <br />\n          <div className='fof-desc'>\n            An unexpected error occurred.{' '}\n            <a href='/' className='404-home'>\n              Click here to go home\n            </a>\n            <br />\n            <>{this.state.error && this.state.error.toString()}</>\n          </div>\n        </div>\n      )\n    }\n    return this.props.children\n  }\n}\n\nexport default E404\nexport { E404, E401, ErrorBoundary }\n","import * as React from 'react'\nexport function Footer() {\n  return (\n    <>\n      <footer className='bg-dark d-print-none'>\n        <div className='footer pt-4'>\n          <div className='col-3' />\n          <div className='col text-center'>\n            <a className='text-light' href='#'>\n              FAQ\n            </a>\n            <a className='pl-4 text-light' href='#'>\n              Help &amp; Training\n            </a>\n            <a className='pl-4 text-light' href='#'>\n              Contact &amp; Vendors\n            </a>\n            <a className='pl-4 text-light' href='#'>\n              Featured Partners\n            </a>\n            <a className='pl-4 text-light' href='#'>\n              Integration Resource Center\n            </a>\n            <a className='pl-4 text-light' href='#'>\n              CAM Resources\n            </a>\n            <a className='pl-4 text-light' href='#'>\n              Utility Menu\n            </a>\n            <a className='pl-4 text-light' href='#'>\n              PFB Catalog Maint.\n            </a>\n          </div>\n          <div className='col-3' />\n        </div>\n\n        <div className='footer pt-5'>\n          <div className='col' />\n          <div className='col text-center pb-3'>\n            <strong>\n              <a className='text-light' href='#'>\n                Privacy Policy\n              </a>\n              <div className='pl-4 pr-4 d-inline'>|</div>\n              <a className='text-light' href='#'>\n                Copyright\n              </a>\n              <div className='pl-4 pr-4 d-inline'>|</div>\n              <a className='text-light' href='#'>\n                Terms &amp; Conditions\n              </a>\n            </strong>\n          </div>\n          <div className='col' />\n        </div>\n      </footer>\n    </>\n  )\n}\n","import * as React from 'react'\n\ninterface ICheckboxProps {\n  isHidden?: boolean\n  attributes?: any\n  id?: string\n  name: string\n  checked: boolean\n  value?: string\n  onChange?: React.ChangeEventHandler\n  onDoubleClick?: React.ChangeEventHandler\n  label: string\n  className?: string\n  title?: string\n  readOnly?: boolean\n}\n\nfunction Checkbox(props: ICheckboxProps) {\n  return props.isHidden ? null : (\n    <div\n      className={'form-checkbox ' + (props.className || '')}\n      id={'check-' + props.name}\n    >\n      <input\n        {...props.attributes}\n        type='checkbox'\n        id={props.id || props.name}\n        name={props.name}\n        checked={props.checked}\n        value={props.value}\n        onChange={props.onChange}\n        onDoubleClick={props.onDoubleClick}\n        title={props.title}\n        readOnly={props.readOnly ? 'readonly' : false}\n      />\n      <label className='ml-2' htmlFor={props.id || props.name}>\n        {props.label}\n      </label>\n    </div>\n  )\n}\n\nexport { Checkbox }\n","import * as React from 'react'\nimport { instanceOf } from 'prop-types'\nimport API from '../../lib/API'\n\ninterface IFileUploadProps {\n  destination: string\n  name: string\n  id?: string\n  addAdditional?: boolean\n}\n\nexport default function FileUpload(props: IFileUploadProps) {\n  if (!props.destination) {\n    throw new Error('Must pass destination address to <FileUpload/> component.')\n  } else {\n    // We need to keep the file in the local state\n    const [file, setFile] = React.useState({})\n\n    /**\n     * Delete the requested file\n     * @param e React click event\n     */\n    const handleFileDelete = (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (e.target instanceof HTMLButtonElement) {\n        const thisFileHref: string | null = e.target.getAttribute('data-href')\n        const thisIndex: string | null = e.target.getAttribute('data-index')\n\n        if (thisFileHref && thisIndex !== null) {\n          API.del(thisFileHref).then((res) => {\n            if (res.success && thisIndex !== null) {\n              const allInputs = inputElements\n              allInputs.splice(parseInt(thisIndex, 10), 1)\n              setInputElements(allInputs)\n            }\n          })\n        }\n      }\n    }\n\n    const FileElFactory = (fileElProps: {\n      location: string\n      index: string\n      name: string\n      type: string\n    }) => {\n      return (\n        <div\n          className='card text-center'\n          style={{ width: '18rem' }}\n          data-index={fileElProps.index}\n        >\n          <div className='card-body'>\n            <span className='mini-preview-thumbnail' />\n            <a target='__blank' href={fileElProps.location}>\n              {fileElProps.name}\n            </a>\n            <button\n              className='btn btn-sm btn-danger mx-2'\n              data-href={fileElProps.location}\n              data-index={fileElProps.index}\n              onClick={handleFileDelete}\n            >\n              &times;\n            </button>\n          </div>\n        </div>\n      )\n    }\n\n    // Here, we automatcially upload the file to the specified directory\n    const handleFileUpload = (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.target instanceof HTMLInputElement && e.target.files) {\n        let index: string = e.target.getAttribute('data-index') || '0'\n        const thisFile: File = e.target.files[0]\n\n        if (index) index = index.toString()\n        setFile({\n          ...file,\n          [index]: thisFile\n        })\n\n        const body = new FormData()\n        body.append('file_1', thisFile)\n\n        // fetch(props.destination + '?file_index=' + index, {\n        fetch(\n          '/api/attachments/anonymous/' +\n            thisFile.name +\n            '?token=' +\n            window.THQ.token,\n          {\n            method: 'POST',\n            // headers: {\n            //   'Content-Type': 'multipart/form-data'\n            // },\n            body\n          }\n        ).then((res) => {\n          if (res.ok) {\n            const currEls: JSX.Element[] = inputElements\n            currEls[index] = (\n              <FileElFactory\n                location={res.headers.get('location') || '#'}\n                index={index}\n                name={thisFile.name}\n                type={thisFile.type}\n              />\n            )\n            setInputElements(currEls)\n          }\n        })\n      }\n    }\n\n    // If we are allowing multiple file uploads, then we need to create a new file input for each\n    // file we are going to upload\n    const createNewInputs = () => {\n      if (props.addAdditional || Object.keys(file).length === 0) {\n        setInputElements([\n          ...inputElements,\n          <input\n            type='file'\n            name='name'\n            key={Object.keys(file).length}\n            data-index={Object.keys(file).length}\n            onInput={handleFileUpload}\n          />\n        ])\n      }\n    }\n\n    const [inputElements, setInputElements]: [\n      JSX.Element[],\n      React.Dispatch<JSX.Element[]>\n    ] = React.useState<JSX.Element[]>([\n      // <input\n      //   type='file'\n      //   name='name'\n      //   data-index='0'\n      //   onInput={handleFileUpload}\n      // />\n    ])\n\n    React.useEffect(createNewInputs, [file])\n\n    return <div>{inputElements}</div>\n  }\n}\n","import * as React from 'react'\nimport { SearchModal } from '../SearchModal'\nimport { FormValue } from '../../types/forms'\nimport { IDictionary } from '../../types/server'\n\nexport interface IRefUpdate {\n  newValue: string\n  newDisplay: string\n  oldValue: string\n  oldDisplay: string\n  field: string\n}\n\ninterface IRefVal {\n  value: string\n  display: string\n}\n\ninterface IReferenceProps {\n  name: string\n  label: string\n  references: string\n  id?: string\n  value?: string\n  display?: string\n  className?: string\n  attributes?: IDictionary<FormValue>\n  readOnly?: boolean\n  setReference: (updatedRef: IRefUpdate) => void\n}\n\nfunction Reference(props: IReferenceProps) {\n  const [refVal, setRefVal] = React.useState<IRefVal>({\n    value: props.value || '',\n    display: props.display || ''\n  })\n\n  const readOnly = props.readOnly || false\n\n  const [searchOpen, setSearchOpen] = React.useState<boolean>(false)\n\n  const toggleSearch = (e: React.MouseEvent<HTMLSpanElement>): void => {\n    setSearchOpen(!searchOpen)\n  }\n\n  /**\n   * Sets the value of local state and propogates the change\n   * to the parent via props.setReference\n   * @param e Click event from reference table\n   */\n  const handleSelection = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n  ) => {\n    if (\n      e.target instanceof HTMLAnchorElement &&\n      e.target.getAttribute('data-key')\n    ) {\n      const dataKey = e.target.getAttribute('data-key') || ''\n      props.setReference({\n        field: props.name,\n        newValue: dataKey,\n        newDisplay: e.target.innerText,\n        oldValue: refVal.value,\n        oldDisplay: refVal.display\n      })\n\n      setRefVal({\n        value: dataKey,\n        display: e.target.innerText\n      })\n    }\n  }\n\n  /**\n   * Sets the local state of the display element\n   * @param e Change event from input element\n   */\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setRefVal({\n      value: refVal.value,\n      display: e.target.value\n    })\n  }\n\n  return (\n    <>\n      <div className={'form-group ' + props.className} id={'cont-' + props.id}>\n        <input\n          type='hidden'\n          id={props.id}\n          name={props.name || props.id}\n          value={refVal.value}\n          onChange={handleChange}\n          readOnly={readOnly}\n        />{' '}\n        {/* Store the actual value */}\n        <label htmlFor={props.id}>{props.label}</label>\n        <div className='input-group'>\n          <input\n            {...props.attributes}\n            type='text'\n            className='form-control'\n            id={props.id + '_display'}\n            name={props.name + '_display' || props.id + '_display'}\n            value={refVal.display}\n            onChange={handleChange}\n            readOnly={readOnly}\n          />\n          <div className='input-group-append'>\n            <button\n              className='btn btn-outline-secondary'\n              type='button'\n              id={props.id + '_search'}\n              data-toggle='modal'\n              onClick={toggleSearch}\n              disabled={readOnly}\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </div>\n      {searchOpen && (\n        <SearchModal\n          title={props.references}\n          table={props.references}\n          handleSelectKey={handleSelection}\n          onClose={toggleSearch}\n        />\n      )}\n    </>\n  )\n}\n\nexport { Reference }\n","import * as React from 'react'\nimport { Component } from 'react'\ninterface ISelectFieldProps {\n  id?: string\n  name: string\n  onChange: React.ChangeEventHandler\n}\n\ninterface ISelectFieldState {\n  otherField?: boolean\n  selectId: string\n  id?: string\n}\n\nclass SelectField extends Component<any, any> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      otherField: false,\n      selectId: props.id\n    }\n  }\n\n  private handleOnChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    if (e.target.value === 'otherSelection') {\n      this.setState({ otherField: true, id: e.target.id, selectId: '' })\n      e.target.setAttribute('oldId', e.target.id)\n      e.target.removeAttribute('id')\n    } else {\n      const oldId = e.target.getAttribute('oldId')\n      if (oldId) {\n        this.setState({ otherField: false, id: null, selectId: oldId })\n        e.target.removeAttribute('oldId')\n      } else {\n        this.setState({ otherField: false, id: null, selectId: e.target.id })\n      }\n    }\n  }\n\n  public render() {\n    const options: JSX.Element[] = []\n    if (Array.isArray(this.props.opts)) {\n      this.props.opts.forEach((opt) => {\n        if (typeof opt === 'string') {\n          options.push(\n            <option value={opt} key={Math.floor(Math.random() * 1000000)}>\n              {opt}\n            </option>\n          )\n        } else {\n          options.push(\n            <option value={opt.value} key={Math.floor(Math.random() * 1000000)}>\n              {opt.text}\n            </option>\n          )\n        }\n      })\n    }\n\n    if (this.props.otherField) {\n      options.push(\n        <option\n          value='otherSelection'\n          key={Math.floor(Math.random() * 1000000)}\n        >\n          Other\n        </option>\n      )\n    }\n    return (\n      !this.props.isHidden && (\n        <div className={'form-group ' + this.props.className}>\n          <label htmlFor={this.props.id}>{this.props.label}</label>\n          <select\n            className='form-control'\n            name={this.props.id}\n            id={this.props.selectId}\n            onChange={(e) => {\n              this.handleOnChange(e)\n              this.props.onChange(e)\n            }}\n            value={this.state.otherField ? 'otherSelection' : this.props.value}\n          >\n            {options}\n          </select>\n          {this.state.otherField && (\n            <input\n              id={this.state.id}\n              type='text'\n              className='form-control mt-3'\n              onChange={this.props.onChange}\n            />\n          )}\n        </div>\n      )\n    )\n  }\n}\n\nexport { SelectField }\n","import * as React from 'react'\n\ninterface ITextField {\n  id?: string\n  name: string\n  value: string | number\n  className?: string\n  references?: string\n  refTable?: string\n  type: string\n  label: string\n  attributes?: any\n  isHidden?: boolean\n  readOnly?: boolean\n  maxLength?: number\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n}\n\nfunction Field(props: ITextField): JSX.Element {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const id = e.target.name || e.target.id\n    const val = {}\n    val[id] = e.target.value\n    if (props.onChange) {\n      props.onChange(e)\n    }\n  }\n\n  return !props.isHidden ? (\n    <div\n      className={'form-group ' + props.className || ''}\n      id={'cont-' + props.name}\n    >\n      <label htmlFor={props.name}>{props.label}</label>\n      <input\n        {...props.attributes}\n        type={props.type}\n        className='form-control'\n        id={props.name}\n        name={props.name}\n        value={props.value || ''}\n        onChange={handleChange}\n        maxLength={props.maxLength}\n        readonly={props.readOnly ? 'readonly' : false}\n      />\n    </div>\n  ) : (\n    <></>\n  )\n}\n\nexport { Field }\n","import { Checkbox } from './Checkbox'\nimport { Field } from './TextField'\nimport { Reference } from './Reference'\nimport { SelectField } from './Select'\n\nexport { Checkbox, Field, Reference, SelectField }\n","import * as React from 'react'\nimport { Table } from './Table/Table'\n\nexport function TableList(props) {\n  return (\n    <div className='mt-3'>\n      <Table table={props.match.params.table} showSearch={true} />\n    </div>\n  )\n}\n","import * as React from 'react'\n\nexport function Loading() {\n  return (\n    <div className='spinner-border' role='status'>\n      <span className='sr-only'>Loading...</span>\n    </div>\n  )\n}\n","// import 'monaco-editor/esm/vs/editor/browser/controller/coreCommands.js'\n// import 'monaco-editor/esm/vs/editor/contrib/comment/comment.js'\n// import 'monaco-editor/esm/vs/editor/contrib/multicursor/multicursor.js'\n// import 'monaco-editor/esm/vs/editor/contrib/rename/rename.js'\n// import 'monaco-editor/esm/vs/editor/contrib/wordOperations/wordOperations.js'\n// import 'monaco-editor/esm/vs/editor/standalone/browser/quickOpen/gotoLine.js'\n// import 'monaco-editor/esm/vs/editor/contrib/contextmenu/contextmenu.js'\n// import 'monaco-editor/esm/vs/editor/contrib/find/findController.js'\n// import 'monaco-editor/esm/vs/editor/contrib/linesOperations/linesOperations.js'\n// import 'monaco-editor/esm/vs/editor/contrib/clipboard/clipboard.js'\n// import 'monaco-editor/esm/vs/editor/contrib/dnd/dnd.js'\n// import 'monaco-editor/esm/vs/editor/contrib/rename/rename.js'\n// const monaco = React.lazy(() => import('./Monaco'))\n\n// import 'monaco-editor/esm/vs/editor/editor.worker'\n// import * as monaco from 'monaco-editor/esm/vs/editor/editor.worker'\n\n// import 'monaco-editor/esm/vs/basic-languages/javascript/javascript.contribution'\n// import 'monaco-editor/esm/vs/language/typescript/monaco.contribution'\nimport * as React from 'react'\nimport { useLayoutEffect, useEffect, useState } from 'react'\nimport API from '../lib/API'\n\nexport function Monaco(props: {\n  value: string\n  language?: string\n  libs?: string[] | string\n}) {\n  const [scriptReady, setScriptReady] = useState(window.monaco ? true : false)\n  useLayoutEffect(() => {\n    window.require = { paths: { vs: '/public/scripts/bundles/min/vs' } }\n    const scripts = [\n      '/public/scripts/bundles/min/vs/loader.js',\n      '/public/scripts/bundles/min/vs/editor/editor.main.nls.js',\n      '/public/scripts/bundles/min/vs/editor/editor.main.js'\n      // '/public/scripts/bundles/min/vs/basic-languages/javascript/javascript.js'\n      // '/public/scripts/bundles/ts.worker.js'\n    ]\n    if (!scriptReady) {\n      scripts.forEach((scriptSrc) => {\n        if (document.querySelector('script[src=\"' + scriptSrc + '\"]')) {\n          return true\n        }\n        const scriptTag: HTMLScriptElement = document.createElement('script')\n        scriptTag.addEventListener('load', (e) => {\n          setTimeout(() => {\n            setScriptReady(window.monaco && window.monaco.editor ? true : false)\n          }, 1000)\n        })\n        scriptTag.src = scriptSrc\n        return document.head.appendChild(scriptTag)\n      })\n      return\n    }\n    // self.MonacoEnvironment = {\n    //   getWorkerUrl: (moduleId, label) => {\n    //     return '/public/scripts/bundles/ts.worker.js'\n    //   }\n    // }\n    window.monaco.editor.create(document.getElementById('monaco'), {\n      value: props.value,\n      language: props.language || 'javascript',\n      theme: 'vs-dark'\n    })\n\n    if (props.libs) {\n      if (!Array.isArray(props.libs)) {\n        props.libs = [props.libs]\n      }\n\n      props.libs.forEach((libPath: string) => {\n        API.get({ path: libPath })\n          .then((data) => {\n            data.data.forEach((lib) => {\n              monaco.languages.typescript.javascriptDefaults.addExtraLib(\n                lib.filePath,\n                lib.contents\n              )\n            })\n          })\n          .catch((err) => {\n            console.error(err)\n          })\n      })\n    }\n\n    return () => {\n      window.monaco.editor && window.monaco.editor.getModels\n        ? window.monaco.editor.getModels()[0].dispose()\n        : console.log('Monaco not found')\n    }\n  }, [scriptReady])\n\n  useEffect(() => {\n    if (!scriptReady) return\n    window.monaco.editor.getModels()[0].setValue(props.value)\n  }, [props.value])\n\n  return (\n    <>\n      <div\n        id='monaco'\n        style={{\n          width: '100%',\n          height: '600px',\n          background: 'solid #1e1e1e'\n          // border: '1px solid #ccc'\n        }}\n      />\n    </>\n  )\n}\n","import * as React from 'react'\nimport { Alert } from './Alerts'\n// import $ from 'jquery'\nimport { ContextMenu, IContextMenuProps } from './ContextMenu'\nimport { generateKeyHash } from '../lib/util'\n\nexport interface IPillBody {\n  id: string\n  label: string\n  body: JSX.Element\n}\n\nexport interface IPillProps {\n  [name: string]: IPillBody\n}\n\ninterface IMessages {\n  info: { message: string }[]\n  warnings: { message: string }[]\n  errors: { message: string }[]\n}\n\nfunction InlineModifier(props: { val: string }) {\n  // const handleOkay = (e) => {}\n  return true\n}\n\nexport default function Pills(props: { pills: IPillProps }) {\n  const [pillAs, setPillAs]: [\n    JSX.Element[],\n    React.Dispatch<React.SetStateAction<JSX.Element[]>>\n  ] = React.useState([<></>])\n  const [pillBodies, setPillBodies]: [\n    JSX.Element[],\n    React.Dispatch<React.SetStateAction<JSX.Element[]>>\n  ] = React.useState([<></>])\n  const [messages, setMessages]: [\n    IMessages,\n    React.ComponentState\n  ] = React.useState({\n    errors: [],\n    info: [],\n    warnings: []\n  })\n\n  const [showContext, setContextShown]: [\n    IContextMenuProps,\n    React.ComponentState\n  ] = React.useState({\n    show: false,\n    location: { x: 0, y: 0 }\n  })\n\n  const handleRename = (e: React.MouseEvent) => {\n    setContextShown({ show: false })\n    console.log(showContext.originalTarget)\n  }\n\n  const handleAuxClick = (e: React.MouseEvent) => {\n    console.log('Right clicked')\n    console.log(e)\n    e.preventDefault()\n    setContextShown({\n      show: true,\n      location: {\n        x: e.pageX,\n        y: e.pageY\n      },\n      originalTarget: e.target\n    })\n  }\n\n  const handleDblClick = (e: React.MouseEvent) => {\n    console.log('Double clicked')\n    if (e.target instanceof HTMLElement) {\n      e.target.innerHTML = `<div>${e.target.innerText}</div>`\n    }\n\n    // $(document).on('click', handleOutsideClick)\n  }\n\n  const handleOutsideClick = (e: React.MouseEvent) => {\n    console.log('Clicked on something else')\n  }\n\n  const handlePillBodies = () => {\n    const pills = { ...props.pills }\n    const newPillAs: JSX.Element[] = []\n    const newPillBodies: JSX.Element[] = []\n    Object.keys(pills).forEach((pill, key) => {\n      if (typeof pills[pill] !== 'object') {\n        return null\n      }\n      if (key === 0) {\n        // First pill is active by default\n        newPillAs.push(\n          <a\n            onDoubleClick={handleDblClick}\n            className='nav-link active'\n            id={pills[pill].id + '-tab'}\n            data-toggle='pill'\n            href={'#' + pills[pill].id}\n            role='tab'\n            aria-controls={pills[pill].id}\n            aria-selected='true'\n            key={generateKeyHash()}\n          >\n            {pills[pill].label}\n          </a>\n        )\n        newPillBodies.push(\n          <div\n            className='tab-pane fade show active'\n            id={pills[pill].id}\n            role='tabpanel'\n            aria-labelledby={pills[pill].id + '-tab'}\n            key={generateKeyHash()}\n          >\n            <div className='row'>\n              <div className='col' />\n              <div className='col-lg-10 col-md-11 col-sm-12 pt-4'>\n                {pills[pill].body}\n              </div>\n              <div className='col' />\n            </div>\n          </div>\n        )\n      } else {\n        newPillAs.push(\n          <a\n            onDoubleClick={handleDblClick}\n            className='nav-link'\n            id={pills[pill].id + '-tab'}\n            data-toggle='pill'\n            href={'#' + pills[pill].id}\n            role='tab'\n            aria-controls={pills[pill].id}\n            aria-selected='false'\n            key={generateKeyHash()}\n          >\n            {pills[pill].label}\n          </a>\n        )\n        newPillBodies.push(\n          <div\n            className='tab-pane fade'\n            id={pills[pill].id}\n            role='tabpanel'\n            aria-labelledby={pills[pill].id + '-tab'}\n            key={generateKeyHash()}\n          >\n            <div className='row'>\n              <div className='col' />\n              <div className='col-lg-10 col-md-11 col-sm-12 pt-4'>\n                {pills[pill].body}\n              </div>\n              <div className='col' />\n            </div>\n          </div>\n        )\n      }\n    })\n\n    setPillAs(newPillAs)\n    setPillBodies(newPillBodies)\n  }\n\n  const contextOptions: [\n    {\n      text: string\n      action: React.MouseEventHandler\n    }\n  ] = [\n    {\n      text: 'Rename',\n      action: handleRename\n    }\n  ]\n\n  /**\n   * Provide a simple, reusable interface to trigger error alerts\n   * across all components that utilize the bill layout\n   * @param {Error} err Error message or raw error\n   */\n  const handleErrorMessage = (err: Error | string) => {\n    setMessages({\n      errors: [...messages.errors].concat([{ message: err.toString() }])\n    })\n  }\n\n  /**\n   * Provide a simple, reusable interface to trigger alerts in the pill layout.\n   * @param {string} message Alert to be displayed as a blue info message\n   */\n  const handleStatusMessage = (message: any) => {\n    setMessages({\n      info: [...messages.info].concat([{ message: message.toString() }])\n    })\n  }\n\n  React.useEffect(handlePillBodies, [props.pills])\n  return (\n    <div className='container-fluid' style={{ minHeight: '80vh' }}>\n      <div className='row mt-4'>\n        <div className='col-md-3 col-sm-12 d-print-none'>\n          <div\n            className='nav flex-column nav-pills'\n            id='v-pills'\n            role='tablist'\n            aria-orientation='vertical'\n            onContextMenu={handleAuxClick}\n          >\n            {pillAs}\n          </div>\n        </div>\n        <div className='col mb-4'>\n          <div className='tab-content' id='v-pill-tabContent'>\n            {messages.errors &&\n              messages.errors.map((errorsmessage) => {\n                return (\n                  <Alert\n                    alertType='info'\n                    message={errorsmessage.message}\n                    key={generateKeyHash()}\n                  />\n                )\n              })}\n            {messages.info &&\n              messages.info.map((infomessage) => {\n                return (\n                  <Alert\n                    alertType='info'\n                    message={infomessage.message}\n                    key={generateKeyHash()}\n                  />\n                )\n              })}\n            {pillBodies}\n          </div>\n        </div>\n      </div>\n      {showContext.show && (\n        <ContextMenu {...showContext} options={contextOptions} />\n      )}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { MouseEventHandler } from 'react'\nimport { Table } from './Table'\nimport { generateKeyHash } from '../lib/util'\n// import * as $ from 'jquery'\n// Importing bootstrap here... causes issues...\n// import 'bootstrap'\n\ninterface ISearchModalProps {\n  table: string\n  handleSelectKey: MouseEventHandler\n  title: string\n  id?: string\n  onClose: (e: React.MouseEvent<HTMLSpanElement>) => void\n}\n\nexport function SearchModal(props: ISearchModalProps) {\n  const id: string = props.id + '_search_modal' || generateKeyHash()\n  const handleClick = (e: React.MouseEvent) => {\n    e.preventDefault()\n    // @ts-ignore\n    jQuery(`#${id}`).modal('hide')\n    props.handleSelectKey(e)\n  }\n\n  React.useEffect((): void => {\n    /*\n      Show the modal after it is rendered\n    */\n    // @ts-ignore\n    jQuery(`#${id}`).modal('show')\n  }, [])\n\n  return (\n    <>\n      <div className='modal modal-xl fade' tabIndex={-1} role='dialog' id={id}>\n        <div className='modal-dialog' role='document'>\n          <div className='modal-content'>\n            <div className='modal-header'>\n              <h5 className='modal-title'>{props.title || 'Search'}</h5>\n              <button\n                type='button'\n                id={id + '_search_modal_close'}\n                className='close'\n                data-dismiss='modal'\n                aria-label='close'\n                onClick={props.onClose}\n              >\n                <span aria-hidden='true'>&times;</span>\n              </button>\n            </div>\n            <div className='modal-body'>\n              <div className='row'>\n                <div className='col'>\n                  <Table\n                    table={props.table + '_list'}\n                    selectReference={handleClick}\n                    hideActions={true}\n                    showSearch={true}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import * as React from 'react'\nimport { Component, MouseEventHandler } from 'react'\nimport API, { TowelRecord } from '../../lib/API'\nimport { E404 } from '../Errors'\nimport { TableRow } from './TableRow'\nimport { TableSearch } from './TableSearch'\nimport { IDictionary, IStatusMessage } from '../../types/server'\nimport { generateKeyHash, noop } from '../../lib/util'\nimport { Alert } from '../Alerts'\nimport { FormValue, ITableField } from '../../types/forms'\nimport { ITablePermissions } from '../../typings'\nimport { IAPIGETResponse, ITableDescriptionResponse } from '../../types/api'\n\nexport interface ITableColumn {\n  [label: string]: {\n    boundTo: string\n    type: string\n  }\n}\n\nexport interface IActionItem {\n  label: string\n  handler: (e: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\ntype ITableRow = IDictionary<FormValue>[]\n\nexport interface ITableProps {\n  actions?: IActionItem[]\n  args?: IDictionary<string>\n  cols?: IDictionary<ITableField> | ITableColumn | string[]\n  hideActions?: boolean\n  hidePagination?: boolean\n  limit?: number\n  onClick?: React.MouseEventHandler\n  table: string\n  rows?: ITableRow[]\n  selectReference?: (e: React.MouseEvent<HTMLAnchorElement>) => void\n  showSearch?: boolean\n}\n\ninterface ITableState {\n  allCols: ITableColumn\n  args?: string\n  cols?: IDictionary<ITableField> | ITableColumn | string[]\n  count: number\n  displayField?: string\n  errors: IStatusMessage[]\n  field: {\n    limit: number\n  }\n  from: number\n  handleClick?: MouseEventHandler\n  hideActions?: boolean\n  id?: string\n  loaded: boolean\n  nextOffset: number\n  offset: number\n  order: {\n    by?: string\n    dir?: 'ASC' | 'DESC'\n  }\n  permissions: ITablePermissions\n  rows: ITableRow[]\n  search: string\n  searchOn: string\n  shownColumns: string[]\n  table: string\n  warnings: IStatusMessage[]\n}\n\n/**\n * Show a list view from a table prop\n */\nexport class Table extends Component<ITableProps, ITableState> {\n  /**\n   * The options that can be passed to <Table/> are:\n   * cols: an object describing the column headers\n   * rows: an array of data\n   * handleClick: <depreciated> handle to be passed to the ID column\n   * baseURL: where to redirect users upon clicking the ID column\n   * hideActions: Hide the actions select element and the checkboxes\n   * table: the name of the database table\n   * @param {object} props\n   */\n  constructor(props: ITableProps) {\n    super(props)\n    let flatArgs = ''\n    if (props.args) {\n      Object.keys(props.args).map((arg) => {\n        // @ts-ignore\n        flatArgs += `${arg}=${props.args[arg]}`\n      })\n    }\n    this.state = {\n      args: flatArgs,\n      allCols: {},\n      cols: props.cols,\n      errors: [],\n      field: {\n        limit: props.limit || 25\n      },\n      count: 0,\n      from: 0,\n      handleClick: props.onClick,\n      hideActions: props.hideActions || false,\n      nextOffset: 25,\n      loaded: props.cols && props.rows ? false : true,\n      offset: 0,\n      order: {},\n      permissions: {\n        edit: false, // Set edit to false by default\n        create: false, // Set create to false by default\n        read: true, // Set read to true by default\n        delete: false // Set delete to false by default\n      },\n      rows: props.rows || [],\n      searchOn: '',\n      search: '',\n      shownColumns: [],\n      table: props.table,\n      warnings: []\n    }\n    if (!props.cols && !props.rows && props.table) this.getCols()\n    // Retrieve the column information from /api/q/describe\n    else if (props.cols && !props.rows && props.table) this.getCols()\n  }\n\n  /**\n   * Fetches data from API if no rows prop is defined or pagination\n   * is activated.\n   * @param param0 Arguments and offset info\n   */\n  private getData({\n    args = this.state.args,\n    offset\n  }: {\n    args?: string\n    offset?: number\n  }) {\n    API.get({\n      path: '/api/q/' + this.state.table,\n      query: {\n        args,\n        limit: this.state.field.limit,\n        offset: 0,\n        fields: Object.keys(this.state.cols as ITableColumn).join(',')\n      }\n    })\n      .then((response: any) => {\n        /*\n          Display warnings in alert container\n        */\n        const warnings: IStatusMessage[] = []\n        if (response.warnings.length > 0) {\n          warnings.push(...response.warnings)\n        }\n\n        if (\n          response &&\n          response.data &&\n          response.data[this.state.table] &&\n          response.meta\n        ) {\n          /*\n            Check for metadata on response, if found we will set\n            the pagination state fields.\n          */\n          this.setState({\n            args,\n            rows: response.data[this.state.table],\n            loaded: true,\n            count: response.meta.count,\n            offset: response.meta.to,\n            from: response.meta.from,\n            nextOffset: response.meta.to,\n            warnings\n          })\n        } else if (\n          response &&\n          response.data &&\n          response.data[this.state.table]\n        ) {\n          /*\n            This shouldn't ever happen, but if for some reason\n            we don't get any metadata then just set the data\n          */\n          this.setState({\n            args,\n            rows: response.data[this.state.table],\n            loaded: true,\n            count: response.data[this.state.table].length,\n            warnings\n          })\n        } else {\n          /*\n            When we don't receive any data then there was an issue with the request\n          */\n          this.setState({\n            ...this.state,\n            errors: [{ error: true, message: 'No data received' }],\n            warnings\n          })\n        }\n      })\n      .catch((err: string) => {\n        this.setState({\n          ...this.state,\n          errors: [\n            {\n              error: true,\n              message: err\n            }\n          ],\n          loaded: true\n        })\n      })\n  }\n\n  /**\n   * Submits query to the server based on phrase in search box and\n   * column selected from dropdown in <TableSearch />\n   * @param column Database column name to query\n   * @param query Query phrase\n   */\n  private handleSearchKeyDown(column: string, query: string) {\n    let operator: string = 'lk'\n    if (query.startsWith('\"') && query.endsWith('\"')) {\n      /*\n        Perform a literal search instead of wildcard\n      */\n      operator = 'eq'\n      query = query.slice(1, -1)\n    }\n\n    const args = `${column}=${operator}|${query}`\n    this.getData({ args })\n  }\n\n  //   private handleHeaderClick(e) {} // Eventually sort by column\n\n  /**\n   * Get column data and default fields to display.\n   * Eventually will also fetch user preferences.\n   */\n  private getCols() {\n    let stateToBe: any = {}\n    API.get({ path: `/api/describe/${this.state.table}` })\n      .then((response: ITableDescriptionResponse) => {\n        if (response.columns) {\n          const allowedCols: any = {}\n          const fields = { ...this.state.field }\n          const displayedColumns: string[] =\n            response.userPreferences || (response.defaultFields as string[])\n\n          /**\n           * Loop through each column in the response.\n           */\n          Object.keys(response.columns).forEach((col) => {\n            const colObj = response.columns[col]\n            if (\n              /*\n                First we check to see if the column is included\n                in the list of displayed fields. If so then we will\n                add it to the list of displayed columns.\n              */\n              (displayedColumns && displayedColumns.indexOf(col) > -1) ||\n              /*\n                Then we check if the column was passed as a prop.\n              */\n              (Array.isArray(this.props.cols) &&\n                this.props.cols.indexOf(col) > -1) ||\n              /*\n                Lastly check for the primary key,\n                if we are working with the primary key\n                then we need to add it to the list of allowed\n                columns. If we don't then a lot of shit will break.\n              */\n              response.primaryKey === col\n            ) {\n              allowedCols[col] = colObj\n            }\n          })\n\n          /*\n            I wish I knew what was happening here\n           */\n          allowedCols[response.displayField].display = this.state.table.slice(\n            0,\n            -5\n          )\n\n          stateToBe = {\n            cols: allowedCols,\n            id: response.primaryKey,\n            field: fields,\n            allCols: response.columns,\n            permissions: response.permissions\n          }\n        } else {\n          const fallbackError = {\n            error: true,\n            message: 'Failed for some reason, but no error was in the response'\n          }\n\n          this.setState({\n            ...this.state,\n            errors: response.errors || fallbackError,\n            loaded: true\n          })\n        }\n\n        /*\n          After we figure out what columns to show and whatnot,\n          we need to actually get some data.\n         \n          Eventually these two requests can be combined into one,\n          but for now this works exceptionally well.\n        */\n        return API.get({\n          path: '/api/q/' + this.state.table,\n          query: {\n            args: this.state.args,\n            limit: this.state.field.limit,\n            fields: Object.keys(stateToBe.cols).join(',')\n          }\n        })\n      })\n      .then((response: any) => {\n        if (\n          response &&\n          response.data &&\n          response.data[this.state.table] &&\n          response.meta\n        ) {\n          this.setState({\n            ...stateToBe,\n            rows: response.data[this.state.table],\n            loaded: true,\n            count: response.meta.count,\n            offset: response.meta.to,\n            from: response.meta.from,\n            nextOffset: response.meta.to\n          })\n        } else if (\n          response &&\n          response.data &&\n          response.data[this.state.table]\n        ) {\n          this.setState({\n            ...stateToBe,\n            rows: response.data[this.state.table],\n            loaded: true,\n            count: response.data[this.state.table].length\n          })\n        } else\n          this.setState({\n            errors: [{ message: 'No data received', error: true }],\n            loaded: true\n          })\n      })\n      .catch((err) => {\n        console.error(err)\n        this.setState({\n          ...this.state,\n          errors: [{ message: err, error: true }],\n          loaded: true\n        })\n      })\n  }\n\n  private handleChange(e: React.ChangeEvent) {\n    if (e.target instanceof HTMLInputElement) {\n      const field = { ...this.state.field }\n      field[e.target.id] = e.target.value\n      this.setState({ field })\n    }\n  }\n\n  /**\n   * Set the number of rows retrieved\n   * @param e Change event from results/page select\n   */\n  private handleSetCount(e: React.ChangeEvent) {\n    if (e.target instanceof HTMLInputElement) {\n      let rows: ITableRow[] = [...this.state.rows]\n      const field = { ...this.state.field }\n      field.limit = parseInt(e.target.value, 10)\n      if (field.limit < this.state.field.limit) {\n        rows = rows.slice(0, field.limit)\n        this.setState({ field, rows })\n      } else {\n        this.setState({ field })\n        this.getData({})\n      }\n    }\n  }\n\n  /**\n   * Updates a specific row in a table\n   * @param id sys_id of row to be updated\n   * @param col Which column is being updated\n   * @param val What the new value is\n   */\n  private updateRowById(id: string, col: string, val: boolean): boolean {\n    if (Array.isArray(this.state.rows) && id) {\n      let updated: boolean = false\n      let count: number = 0\n      for (const row of this.state.rows) {\n        const thisId: string = row[id].id as string\n        if (thisId === id) {\n          if (col in row) {\n            const futureRows: ITableRow[] = [...this.state.rows]\n            futureRows[count][col] = val\n            futureRows.splice(count, 1, row)\n            this.setState({ rows: futureRows })\n            updated = true\n            break\n          }\n        }\n        count++\n      }\n      return updated\n    } else {\n      // If we don't have any data or id is undefined,\n      // return false to indicate no update was made.\n      return false\n    }\n  }\n\n  /**\n   * Allows records in a table to be updated inline with the table.\n   * @param e Change event\n   * @expiramental\n   */\n  private handleInlineUpdate(e: React.ChangeEvent) {\n    if (e.target instanceof HTMLInputElement) {\n      const updateId = e.target.value\n      const key = e.target.name\n      const checked = e.target.checked\n      const body: any = {}\n      body[key] = checked\n      new TowelRecord(this.state.table)\n        .update(updateId, body)\n        .then((res: any) => {\n          if (res && res.status === 204) {\n            console.log('Updated')\n          }\n          this.updateRowById(updateId, key, checked)\n        })\n        .catch((err) => {\n          console.error(err)\n        })\n    }\n  }\n\n  /**\n   * Fetches data from:\n   *  - The next page\n   *  - The previous page\n   *  - The first page\n   *  - The last page\n   * Based on the `data-page` attribute present on the button.\n   * @param e Click event from pagination arrows\n   */\n  private handlePage(e: React.MouseEvent) {\n    e.preventDefault()\n    if (e.target instanceof HTMLElement) {\n      const dir = e.target.getAttribute('data-page') || '1'\n      // const dir = parseInt(val, 10) // Get the pagination value from the element\n      let nextOffset = 0\n\n      if (dir === '-2') {\n        // First page\n        nextOffset = 0\n      } else if (dir === '-1') {\n        // Previous page\n        nextOffset = this.state.from - this.state.field.limit\n      } else if (dir === '2') {\n        // Last page\n        nextOffset = this.state.count - this.state.field.limit\n      } else {\n        // Next page\n        nextOffset = this.state.from + this.state.field.limit\n      }\n\n      API.get({\n        path: '/api/q/' + this.state.table,\n        query: {\n          args: this.state.args, // Information from search\n          offset: nextOffset, // Skip over what's on the page now\n          limit: this.state.field.limit, // How many to fetch\n          fields: Object.keys(this.state.cols as ITableColumn).join(',') // Get only what we need\n        }\n      })\n        .then((response: any) => {\n          if (\n            response &&\n            response.data &&\n            response.data[this.state.table] &&\n            response.meta.count\n          ) {\n            this.setState({\n              rows: response.data[this.state.table],\n              loaded: true,\n              count: response.meta.count,\n              offset: response.meta.to,\n              from: response.meta.from,\n              nextOffset: response.meta.to\n            })\n          } else if (\n            response &&\n            response.data &&\n            response.data[this.state.table]\n          ) {\n            this.setState({\n              rows: response.data[this.state.table],\n              loaded: true,\n              count: response.data[this.state.table].length\n            })\n          } else\n            this.setState({\n              errors: [{ message: 'No data received', error: true }]\n            })\n        })\n        .catch((err) => {\n          console.error(err)\n        })\n    }\n  }\n\n  /**\n   * Listen for changes to the table and arguments on route change.\n   * @param prevProps\n   * @param prevState\n   */\n  public componentDidUpdate(prevProps: any, prevState: any) {\n    if (prevProps.table !== this.props.table) {\n      console.log('Received new table')\n      this.setState({ table: this.props.table }, () => {\n        this.getCols()\n      })\n    } else {\n      console.log(`Table ${prevProps.table} is the same as ${this.props.table}`)\n    }\n  }\n\n  public render(): JSX.Element {\n    const headers: JSX.Element[] = []\n    const nextPage =\n      this.state.nextOffset >= this.state.count ? { disabled: true } : false\n    const prevPage =\n      this.state.offset - this.state.field.limit <= 0\n        ? { disabled: true }\n        : false\n\n    if (!this.state.hideActions) {\n      headers.push(\n        <th scope='col' key={generateKeyHash()}>\n          <input className='position-static' type='checkbox' />\n        </th>\n      )\n    }\n    if (this.state.cols) {\n      for (const col in this.state.cols) {\n        if (\n          col === this.state.id &&\n          this.state.id !== this.state.displayField\n        ) {\n          continue\n        }\n        headers.push(\n          <th scope='col' data-bind={col} key={generateKeyHash()}>\n            {this.state.cols[col].label}\n          </th>\n        )\n      }\n    }\n\n    const rows: JSX.Element[] = []\n    if (this.state.rows && this.state.rows.length > 0) {\n      for (const row of this.state.rows) {\n        rows.push(\n          <TableRow\n            key={generateKeyHash()}\n            showSelect={!this.state.hideActions}\n            cells={row}\n            cols={this.state.cols}\n            id={this.state.id || 'sys_id'}\n            onSelectKey={this.props.selectReference}\n            handleInlineUpdate={this.handleInlineUpdate.bind(this)}\n            permissions={this.state.permissions}\n          />\n        )\n      }\n    }\n\n    return (\n      <>\n        {this.state.loaded && (\n          <>\n            {this.props.showSearch && this.state.cols && (\n              <TableSearch\n                onSearchKeyDown={this.handleSearchKeyDown.bind(this)}\n                onSetCount={this.handleSetCount.bind(this)}\n                permissions={this.state.permissions}\n                cols={this.state.cols as IDictionary<ITableField>}\n                table={this.state.table}\n              />\n            )}\n            <div className='row'>\n              <div className='col' />\n              <div className='col-10'>\n                {this.state.errors.map((err: IStatusMessage) => {\n                  return <Alert alertType='danger' message={err.message} />\n                })}\n                {this.state.warnings.map((warning: IStatusMessage) => {\n                  return (\n                    <Alert\n                      message={warning.message}\n                      alertType='warning'\n                      dismissable={true}\n                    />\n                  )\n                })}\n              </div>\n              <div className='col' />\n            </div>\n            <div className='row'>\n              <div className='col'>\n                <div className='table-responsive'>\n                  <table className='table table-striped table-hover table-sm'>\n                    <thead className='thead-dark'>\n                      <tr>{headers}</tr>\n                    </thead>\n                    <tbody>\n                      {rows.length === 0 && this.state.loaded && (\n                        <tr>\n                          <td\n                            colSpan={headers.length}\n                            style={{ textAlign: 'center' }}\n                          >\n                            No Results Found\n                          </td>\n                        </tr>\n                      )}\n                      {rows.length > 0 && rows}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n\n            <div className='row'>\n              {!this.state.hideActions && (\n                <div className='col mx-3'>\n                  <select className='form-control'>\n                    <option value=''>Action on selected rows</option>\n                    {this.props.actions !== undefined && this.props.actions}\n                  </select>\n                </div>\n              )}\n              <div className='col' />\n              {!this.props.hidePagination && (\n                <div className='col-lg-6 col-md-10 col-sm-12'>\n                  <button\n                    {...prevPage}\n                    className={'btn btn-secondary m-1'}\n                    data-page='-2'\n                    onClick={this.handlePage.bind(this)}\n                  >\n                    &laquo;\n                  </button>\n                  <button\n                    {...prevPage}\n                    className={'btn btn-secondary m-1'}\n                    data-page='-1'\n                    onClick={this.handlePage.bind(this)}\n                  >\n                    &lsaquo;\n                  </button>\n                  <span className='mx-1'>\n                    {this.state.from +\n                      ' - ' +\n                      this.state.nextOffset +\n                      ' of ' +\n                      this.state.count}\n                  </span>\n                  <button\n                    {...nextPage}\n                    className={'btn btn-secondary m-1'}\n                    data-page='1'\n                    onClick={this.handlePage.bind(this)}\n                  >\n                    &rsaquo;\n                  </button>\n                  <button\n                    {...nextPage}\n                    className={'btn btn-secondary m-1'}\n                    data-page='2'\n                    onClick={this.handlePage.bind(this)}\n                  >\n                    &raquo;\n                  </button>\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </>\n    )\n  }\n}\n","import * as React from 'react'\nimport { MouseEventHandler, ChangeEventHandler } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Checkbox } from '../FormControls'\nimport { generateKeyHash } from '../../lib/util'\n\ninterface ITableRowProps {\n  showSelect?: boolean\n  cells: any\n  id: string\n  onSelectKey?: MouseEventHandler\n  cols: any\n  permissions?: any\n  handleInlineUpdate: ChangeEventHandler\n}\n\nexport function TableRow(props: ITableRowProps) {\n  function handleValReturn(e) {\n    e.preventDefault()\n  }\n\n  const cells: JSX.Element[] = []\n  if (props.showSelect) {\n    cells.push(\n      <td key={Math.floor(Math.random() * 10000)} className='align-middle'>\n        <input\n          className='position-static'\n          type='checkbox'\n          value={props.cells && props.cells[props.id]}\n        />\n      </td>\n    )\n  }\n  Object.keys(props.cols).map((col) => {\n    if (col === props.id) return false\n    const thisCol = props.cols[col]\n    const val = props.cells[col]\n    const type = thisCol.type\n    if (thisCol.reference || thisCol.display) {\n      if (props.onSelectKey && thisCol.display) {\n        cells.push(\n          <td key={generateKeyHash()} tabIndex={0}>\n            <div className='data-table-text-cell'>\n              <a\n                href='#'\n                data-key={props.cells[props.id]}\n                onClick={props.onSelectKey}\n                className='align-middle'\n              >\n                {val || ''}\n              </a>\n            </div>\n          </td>\n        )\n      } else if (props.onSelectKey && thisCol.reference) {\n        cells.push(\n          <td key={generateKeyHash()} className='align-middle' tabIndex={0}>\n            {val || ''}\n          </td>\n        )\n      } else if (thisCol.display) {\n        cells.push(\n          <td key={generateKeyHash()} tabIndex={0}>\n            <div className='data-table-text-cell'>\n              <Link\n                to={`/f/${thisCol.display}/${props.cells[props.id] || '#'}`}\n                className='align-middle'\n              >\n                {val || ''}\n              </Link>\n            </div>\n          </td>\n        )\n      } else {\n        const refCol = props.cols[col]\n        const refTable = refCol ? refCol.refTable : '#'\n        cells.push(\n          <td key={generateKeyHash()} tabIndex={0}>\n            <div className='data-table-text-cell'>\n              <Link\n                to={`/f/${refTable}/${val || '#'}`}\n                title={props.cols[col].label}\n                className='align-middle'\n              >\n                {props.cells[col + '_display'] || ''}\n              </Link>\n            </div>\n          </td>\n        )\n      }\n    } else if (type && type.toLowerCase() === 'date') {\n      cells.push(\n        <td key={generateKeyHash()} className='align-middle' tabIndex={0}>\n          <div className='data-table-text-cell'>\n            {new Date(val).toDateString() || ''}\n          </div>\n        </td>\n      )\n    } else if (type && type.toLowerCase() === 'boolean') {\n      if (props.permissions && props.permissions.edit) {\n        cells.push(\n          <td\n            key={generateKeyHash()}\n            style={{ textAlign: 'center' }}\n            tabIndex={0}\n          >\n            <Checkbox\n              id={col + props.cells[props.id]}\n              name={col}\n              value={props.cells[props.id]}\n              onChange={props.handleInlineUpdate}\n              title={props.cols[col].label}\n              label=''\n              checked={val === true || val === 1}\n            />\n          </td>\n        )\n      } else {\n        cells.push(\n          <td\n            key={generateKeyHash()}\n            style={{ textAlign: 'center' }}\n            className='align-middle'\n            tabIndex={0}\n          >\n            <div className='data-table-text-cell'>\n              {val === true || (val === 1 && '×') || ''}\n            </div>\n          </td>\n        )\n      }\n    } else {\n      cells.push(\n        <td key={generateKeyHash()} className='align-middle' tabIndex={0}>\n          <div className='data-table-text-cell'>\n            {val ? val.toString() : ''}\n          </div>\n        </td>\n      )\n    }\n  })\n  return <tr>{cells}</tr>\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport { ITablePermissions } from '../../typings'\nimport { Can } from '../Can'\nimport { Link } from 'react-router-dom'\nimport { generateKeyHash } from '../../lib/util'\nimport { ITableColumn } from './Table'\nimport { ITableField } from '../../types/forms'\nimport { IDictionary } from '../../types/server'\n\ninterface ITableSearchProps {\n  onSearchKeyDown: (selectedColumn: string, searchString: string) => void\n  permissions: ITablePermissions\n  onSetCount: React.ChangeEventHandler\n  table: string\n  cols: IDictionary<ITableField>\n  limit?: number\n}\n\ninterface ITableSearchState {\n  limit?: number\n  options?: any\n  table: string\n  searchQ: string\n  col: string\n}\n\nexport class TableSearch extends Component<\n  ITableSearchProps,\n  ITableSearchState\n> {\n  constructor(props: ITableSearchProps) {\n    super(props)\n    const fieldSearchSelections: JSX.Element[] = []\n    let initialValue: string\n\n    if (typeof props.cols === 'object') {\n      initialValue = Object.keys(props.cols)[0]\n    } else {\n      initialValue = ''\n    }\n\n    this.state = {\n      limit: props.limit || 25,\n      table: props.table,\n      searchQ: '',\n      col: initialValue\n    }\n  }\n\n  private handleChange(e) {\n    const state = { ...this.state }\n    state[e.target.id] = e.target.value\n    this.setState(state)\n  }\n\n  private handleKeyDown(e) {\n    if (e.keyCode && e.keyCode === 13) {\n      this.props.onSearchKeyDown(this.state.col, this.state.searchQ)\n    }\n  }\n\n  public render() {\n    return (\n      <div className='row'>\n        <div className='col'>\n          <div className='form-group mr-a'>\n            <div className='input-group'>\n              <div className='input-group-prepend'>\n                <select\n                  className='custom-select'\n                  onChange={this.handleChange.bind(this)}\n                  value={this.state.col}\n                  id='col'\n                >\n                  {Object.keys(this.props.cols).map((column) => {\n                    const colObj: ITableField = this.props.cols[column]\n                    let searchColVal: string = column\n                    if (colObj.type === 'string') {\n                      if (colObj.reference) searchColVal += '_display'\n                      return (\n                        <option key={generateKeyHash()} value={searchColVal}>\n                          {colObj.label}\n                        </option>\n                      )\n                    }\n                  })}\n                </select>\n              </div>\n              <input\n                id='searchQ'\n                className='form-control'\n                onChange={this.handleChange.bind(this)}\n                value={this.state.searchQ}\n                onKeyDown={this.handleKeyDown.bind(this)}\n                type='text'\n              />\n            </div>\n          </div>\n        </div>\n        <div className='col'>\n          <div className='form-group'>\n            <div className='input-group'>\n              <select\n                className='custom-select'\n                onChange={this.props.onSetCount}\n                value={this.state.limit}\n                id='limit'\n              >\n                <option value={15}>15</option>\n                <option value={25}>25</option>\n                <option value={35}>35</option>\n                <option value={50}>50</option>\n                <option value={75}>75</option>\n                <option value={100}>100</option>\n              </select>\n              <div className='input-group-append'>\n                <label className='input-group-text' htmlFor='limit'>\n                  Results / Page\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Can if={this.props.permissions && this.props.permissions.create}>\n          <div className='col-1'>\n            <Link\n              className='btn btn-primary'\n              to={`/f/${this.props.table.slice(0, -5)}/new`}\n            >\n              New\n            </Link>\n          </div>\n        </Can>\n      </div>\n    )\n  }\n}\n","import { Table } from './Table'\n\nexport default Table\nexport { Table }\n","export function FileExplorerActions(props) {\n  return (\n    <div className='file-explorer-action-toolbar'>\n      <ul className='file-explorer-actions-list'>\n        <li role='presentation' className='toolbar-action-item'>\n          <a\n            className='explorer-action-button toolbar-icon-new-file'\n            role='button'\n          />\n        </li>\n        <li role='presentation' className='toolbar-action-item'>\n          <a\n            className='explorer-action-button toolbar-icon-new-folder'\n            role='button'\n          />\n        </li>\n        <li role='presentation' className='toolbar-action-item'>\n          <a\n            className='explorer-action-button toolbar-icon-refresh'\n            role='button'\n          />\n        </li>\n      </ul>\n    </div>\n  )\n}\n","import { FileExplorerActions } from './FileExplorerActions'\nimport { useState, useEffect } from 'react'\nimport {\n  IFileExplorerFolderProps,\n  FileExplorerFolder\n} from './FileExplorerFolder'\nimport { IFileExplorerFileProps } from './FileExplorerFile'\nimport API from '../../lib/API'\n\nexport interface IFileExplorerContainerProps {\n  fileStructureLocation: string\n}\n\ninterface IFile {\n  fileName: string\n  fileType: string\n  fileUri: string\n}\n\ninterface IFolder {\n  folderName: string\n  folders?: IFolder[]\n  files?: IFile[]\n}\n\nexport interface IFileStructure {\n  parentName: string\n  folders: IFolder[]\n}\n\nexport function FileExplorerContainer(props: IFileExplorerContainerProps) {\n  const [fileStructure, setFileStructure] = useState<IFileStructure>()\n\n  const [activeIndex, setActiveIndex] = useState<number[]>([-1])\n  const [allFileFolders, setAllFileFolders] = useState<JSX.Element[]>([])\n\n  const getActiveIndex = (): null | number[] => {\n    return activeIndex\n  }\n\n  const InitialFolderLoader = (initProps): JSX.Element => {\n    return (\n      <FileExplorerFolder\n        folderName='root'\n        // @ts-ignore\n        folders={fileStructure.folders}\n        // @ts-ignore\n        files={fileStructure.files}\n        depth={0}\n        activeIndex={initProps.activeIndex}\n        setActiveIndex={initProps.setActiveIndex}\n        index={0}\n      />\n    )\n  }\n\n  useEffect(() => {\n    if (fileStructure !== undefined) {\n      setAllFileFolders([\n        <InitialFolderLoader\n          activeIndex={getActiveIndex}\n          setActiveIndex={setActiveIndex}\n        />\n      ])\n    }\n  }, [fileStructure])\n\n  useEffect(() => {\n    API.get({ path: props.fileStructureLocation })\n      .then((details: { data: IFileStructure; success: boolean }) => {\n        if (details.success) {\n          setFileStructure(details.data)\n        }\n      })\n      .catch(alert)\n  }, [props.fileStructureLocation])\n\n  return (\n    <div className='file-explorer-container pl-1'>\n      <FileExplorerActions />\n      {fileStructure && allFileFolders}\n    </div>\n  )\n}\n","import API from '../../lib/API'\n\nexport interface IFile {\n  fileName: string\n  fileType: string\n  fileUri: string\n}\n\nexport interface IFileExplorerFileProps {\n  fileName: string\n  fileType: string\n  fileUri: string\n  depth: number\n  index: number\n  activeIndex: () => number[]\n  setActiveIndex: React.Dispatch<number[]>\n}\n\n/**\n * Renders a file in the list\n * @param props Object containing descriptions for component\n */\nexport function FileExplorerFile(props: IFileExplorerFileProps) {\n  const setFileContents = (e: React.MouseEvent) => {\n    API.get({ path: props.fileUri })\n      .then((file) => {\n        monaco.editor.getModels()[0].setValue(file.data.contents)\n        monaco.editor.setModelLanguage(\n          monaco.editor.getModels()[0],\n          'typescript'\n        )\n        monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n          jsx: monaco.languages.typescript.JsxEmit.Preserve\n        })\n\n        monaco.languages.typescript.javascriptDefaults.setCompilerOptions({\n          typeRoots: [\n            'server/node_modules/@types',\n            'client/node_modules/@types'\n          ]\n        })\n      })\n      .catch(alert)\n  }\n  return (\n    <div className='file-explorer-row' onClick={setFileContents}>\n      <div className='file-explorer-file file-explorer-row-contents'>\n        <span\n          className='file-explorer-name file-explorer-icon file-explorer-icon-file'\n          style={{\n            margin: '0 0 0 ' + ((props.depth || 2) * 8).toString() + 'px',\n            backgroundColor: props.activeIndex().includes(props.index)\n              ? 'green'\n              : ''\n          }}\n        >\n          <span className='file-explorer-label'>{props.fileName}</span>\n        </span>\n      </div>\n    </div>\n  )\n}\n","import { IFileExplorerFileProps, FileExplorerFile } from './FileExplorerFile'\nimport { useState } from 'react'\n\nexport interface IFileExplorerFolderProps {\n  folders?: IFileExplorerFolderProps[]\n  files?: IFileExplorerFileProps[]\n  folderName: string\n  index: number\n  depth: number\n  activeIndex: () => number[]\n  setActiveIndex: React.Dispatch<number[]>\n}\n\nexport function FileExplorerFolder(props: IFileExplorerFolderProps) {\n  const allItems: JSX.Element[] = []\n  const [isOpen, setIsOpen] = useState<boolean>(true)\n\n  const toggleCollapsed = (e) => {\n    setIsOpen(!isOpen)\n  }\n\n  if (props.folders) {\n    const allFolders = props.folders.map(\n      (folder: IFileExplorerFolderProps, i: number) => {\n        return (\n          <FileExplorerFolder\n            folderName={folder.folderName}\n            files={folder.files}\n            folders={folder.folders}\n            depth={(props.depth || 2) + 1}\n            key={folder.folderName + i}\n            index={props.index + 1}\n            activeIndex={props.activeIndex}\n            setActiveIndex={props.setActiveIndex}\n          />\n        )\n      }\n    )\n    allItems.push(...allFolders)\n  }\n\n  if (props.files) {\n    allItems.push(\n      ...props.files.map((file: IFileExplorerFileProps, i: number) => {\n        return (\n          <FileExplorerFile\n            fileName={file.fileName}\n            fileType={file.fileType}\n            fileUri={file.fileUri}\n            depth={(props.depth || 2) + 1}\n            key={file.fileName + i}\n            index={props.index + i}\n            activeIndex={props.activeIndex}\n            setActiveIndex={props.setActiveIndex}\n          />\n        )\n      })\n    )\n  }\n\n  const handleClick = (e: React.MouseEvent) => {\n    toggleCollapsed(e)\n    props.setActiveIndex([props.index])\n  }\n\n  return (\n    <>\n      <div\n        className={\n          'file-explorer-row ' +\n          (Array.isArray(props.activeIndex) &&\n            props.index &&\n            props.activeIndex.includes(props.index))\n            ? 'file-explorer-row active-row'\n            : 'file-explorer-row'\n          // isOpen\n          //   ? 'file-explorer-row file-explorer-collapsible collapsed'\n          //   : 'file-explorer-row file-explorer-collapsible'\n        }\n        onClick={handleClick}\n      >\n        <div className='file-explorer-row-contents'>\n          <span\n            className={\n              'file-explorer-name file-explorer-icon ' +\n              (isOpen\n                ? 'file-explorer-icon-folder-collapsed'\n                : 'file-explorer-icon-folder')\n            }\n            style={{\n              margin: '0 0 0 ' + ((props.depth || 2) * 8).toString() + 'px'\n            }}\n          >\n            <span className='file-explorer-label'>{props.folderName}</span>\n          </span>\n        </div>\n      </div>\n\n      {isOpen && allItems}\n    </>\n  )\n}\n","import { FileExplorerContainer } from './FileExplorer/FileExplorerContainer'\nimport { Monaco } from '../common/Monaco'\nimport { useState, useEffect } from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport API from '../lib/API'\nimport { Alert } from '../common/Alerts'\n\nexport interface ICustomComponentDetails {\n  sys_id: string\n  name: string\n  title?: string\n  metadata?: any\n  version_of?: number\n}\n\nexport function Workspace(\n  props: RouteComponentProps<{ componentTitle: string }>\n) {\n  const [customComponentDetails, setCustomComponentDetails] = useState<\n    ICustomComponentDetails\n  >()\n\n  const [errors, setErrors] = useState<{ message: string }[]>()\n\n  useEffect(() => {\n    API.get({\n      path: '/api/c/customComponentBuilder/' + props.match.params.componentTitle\n    }).then((details) => {\n      if (details.success) {\n        setCustomComponentDetails(details.data)\n      } else {\n        setErrors(details.errors)\n      }\n    })\n  }, [props.match.params.componentTitle])\n\n  return (\n    <>\n      <link\n        href='/public/c/customComponentDesigner/assets/styles/file-explorer.css'\n        type='text/css'\n        rel='stylesheet'\n      />\n      <div>\n        <div className='row'>\n          <div className='col-sm-12 col-lg-6 col-md-10 py-3'>\n            {errors && <Alert alertType='danger' message={errors[0].message} />}\n            <h2>{customComponentDetails && customComponentDetails.title}</h2>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-md-3 col-lg-2' style={{ padding: '0' }}>\n            {customComponentDetails && (\n              <FileExplorerContainer\n                fileStructureLocation={\n                  '/api/c/customComponentBuilder/tree/' +\n                  customComponentDetails.name\n                }\n              />\n            )}\n          </div>\n          <div className='col-md-9 col-lg-10' style={{ padding: '0' }}>\n            <Monaco\n              value='test string'\n              language='typescript'\n              libs={[\n                '/api/c/customComponentBuilder/libs/server',\n                '/api/c/customComponentBuilder/libs/client'\n              ]}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import { Reference, Field, Checkbox } from '../common/FormControls'\nimport {\n  ISerializedFormControl,\n  ITableField,\n  IFormDetails,\n  FormValue,\n  IFormTab\n} from '../types/forms'\nimport { IPillProps } from '../common/PillLayout'\nimport { IDataModel } from './Form'\nimport { IDictionary } from '../types/server'\nimport { useState, useEffect } from 'react'\nimport { TowelRecord } from '../lib/API'\nimport * as H from 'history'\nimport { generateKeyHash } from '../lib/util'\nimport { IRefUpdate } from '../common/FormControls/Reference'\n\n/**\n * Renders a form populated with fields from a \"fields\" argument\n * @param props\n */\n\nconst formControlFromJson = (\n  fieldName: string,\n  field: ITableField,\n  changeHandler: React.ChangeEventHandler,\n  model: IDataModel,\n  displayVal?: string\n): ISerializedFormControl => {\n  switch (field.type) {\n    case 'string': {\n      if (field.refTable) {\n        return {\n          component: Reference,\n          props: {\n            label: field.label,\n            id: fieldName,\n            name: fieldName,\n            onChange: changeHandler,\n            value: model[fieldName],\n            display: displayVal,\n            className: 'col-lg-6 col-md-12',\n            references: field.refTable\n          }\n        }\n      } else {\n        return {\n          component: Field,\n          props: {\n            label: field.label,\n            name: fieldName,\n            onChange: changeHandler,\n            value: model[fieldName],\n            maxLength: field.maxLength || 40,\n            className: 'col-lg-6 col-md-12'\n          }\n        }\n      }\n    }\n    case 'boolean': {\n      return {\n        component: Checkbox,\n        props: {\n          label: field.label,\n          name: fieldName,\n          onChange: changeHandler,\n          value: model[fieldName],\n          checked: !!model[fieldName],\n          className: 'col-lg-6 col-md-12'\n        }\n      }\n    }\n    default: {\n      return {\n        component: Field,\n        props: {\n          label: field.label,\n          name: fieldName,\n          onChange: changeHandler,\n          value: model[fieldName],\n          className: 'col-lg-6 col-md-12'\n        }\n      }\n    }\n  }\n}\n\n/**\n *\n * @param form Columns being passed to render\n * @param model Data model to pull values from\n * @param primaryKey String containing primary key for table\n * @param param3 Object containing change, submit and delete handlers\n */\n\n// {\n//   id: string\n//   label: string\n//   body: JSX.Element\n// }\nexport default function FieldForm(props: {\n  form: IFormTab\n  table: string\n  id: string\n  primaryKey: string\n  history: H.History\n}) {\n  // Lets initialize all of the fields with empty strings to prevent undefined\n  // values being passed to form controls\n  const initialDataModel: { values: IDictionary<FormValue> } = { values: {} }\n  Object.keys(props.form.fields).forEach((fieldName) => {\n    initialDataModel.values[fieldName] = ''\n  })\n\n  // Hold all of the field data here\n  const [dataModel, setDataModel]: [\n    IDataModel,\n    React.Dispatch<IDataModel>\n  ] = useState({\n    ...initialDataModel,\n    fields: [] as string[]\n  })\n\n  // @ts-ignore\n  window.dm = dataModel\n\n  // Store a list of modified fields\n  const [modifiedFields, setModifiedFields]: [\n    string[],\n    React.ComponentState\n  ] = useState([])\n\n  // @ts-ignore\n  const [errors, setErrors]: [\n    JSX.Element[],\n    React.Dispatch<React.SetStateAction<JSX.Element[]>>\n  ] = useState([])\n\n  // @ts-ignore\n  window.dm = dataModel\n\n  // Define helper functions\n  const getData = (table: string, id: string, fields: string[]) => {\n    return new Promise((resolve, reject) => {\n      new TowelRecord(table)\n        .get({ fields, id })\n        .then((fetchedFields) => {\n          if (fetchedFields.errors) {\n            const allErrors = fetchedFields.errors.map((err) => {\n              return (\n                <div className='alert alert-danger' role='alert'>\n                  {err.message}\n                </div>\n              )\n            })\n            setErrors(allErrors)\n          }\n          setDataModel({\n            values: {\n              ...dataModel.values,\n              ...(fetchedFields.data[table] as IDictionary<FormValue>)\n            },\n            fields: dataModel.fields\n          })\n          // reloadForm()\n          resolve()\n        })\n        .catch(reject)\n    })\n  }\n\n  const handleSubmit = () => {\n    const id = props.id\n    const table = props.table\n    if (id === 'new') {\n      new TowelRecord(table).create({ ...dataModel.values })\n    } else {\n      const body: any = { ...dataModel.values, sys_id: id }\n      // for (const field in dataModel) {\n      //   if (modifiedFields.indexOf(field) > -1) {\n      //     body[field] = dataModel[field]\n      //   }\n      // }\n\n      new TowelRecord(table)\n        .update(id, body)\n        .then((res) => {\n          console.log(res)\n        })\n        .catch((err) => {\n          console.error(err)\n        })\n    }\n  }\n\n  const handleDelete = () => {\n    new TowelRecord(props.table).delete(props.id).then((res: any) => {\n      if (res.status === 204) {\n        props.history.goBack()\n      }\n    })\n  }\n\n  const handleChange: React.ChangeEventHandler = (e: React.ChangeEvent) => {\n    if (e.target instanceof HTMLInputElement) {\n      const newValues = {}\n\n      if (e.target.type === 'checkbox') {\n        newValues[e.target.name] = e.target.checked\n      } else {\n        newValues[e.target.name] = e.target.value\n      }\n      setDataModel({\n        values: {\n          ...dataModel.values,\n          ...newValues\n        },\n        fields: dataModel.fields\n      })\n    }\n  }\n\n  const setReference = (updatedRef: IRefUpdate): void => {\n    const newValues = {\n      [updatedRef.field]: updatedRef.newValue\n    }\n    setDataModel({\n      values: {\n        ...dataModel.values,\n        ...newValues\n      },\n      fields: dataModel.fields\n    })\n  }\n\n  useEffect(() => {\n    if (props.id !== 'new') {\n      getData(props.table, props.id, Object.keys(props.form.fields))\n    }\n  }, [])\n\n  const displayFields: (JSX.Element | null)[] = Object.keys(\n    props.form.fields\n  ).map((fieldName: string, key: number) => {\n    const thisFieldInfo: ITableField = props.form.fields[fieldName]\n    if (fieldName === props.primaryKey) {\n      /*\n        It really is superfluous to push the primary key\n        into a hidden field, but it makes sense for me.\n      */\n      return (\n        <input\n          type='hidden'\n          id={fieldName}\n          name={fieldName}\n          value={dataModel.values[fieldName]}\n          onChange={handleChange}\n          key={generateKeyHash()}\n        />\n      )\n    }\n\n    /*\n      Decide which kind of field to render\n    */\n    const field = props.form.fields[fieldName]\n    switch (field.type) {\n      case 'string': {\n        if (field.refTable) {\n          return (\n            <Reference\n              label={field.label}\n              id={fieldName}\n              name={fieldName}\n              setReference={setReference}\n              value={dataModel.values[fieldName]}\n              display={dataModel.values[fieldName + '_display']}\n              className={'col-lg-6 col-md-12'}\n              references={field.refTable}\n              key={generateKeyHash()}\n              readOnly={\n                thisFieldInfo.readonly && !(props.id === 'new') ? true : false\n              }\n            />\n          )\n        } else {\n          return (\n            <Field\n              type={'text'}\n              label={field.label}\n              name={fieldName}\n              onChange={handleChange}\n              value={dataModel.values[fieldName]}\n              maxLength={field.maxLength || 40}\n              className={'col-lg-6 col-md-12'}\n              readOnly={\n                thisFieldInfo.readonly && !(props.id === 'new') ? true : false\n              }\n              key={generateKeyHash()}\n            />\n          )\n        }\n      }\n      case 'boolean': {\n        return (\n          <Checkbox\n            label={field.label}\n            name={fieldName}\n            onChange={handleChange}\n            value={dataModel.values[fieldName]}\n            checked={!!dataModel.values[fieldName]}\n            className={'col-lg-6 col-md-12'}\n            readOnly={\n              thisFieldInfo.readonly && !(props.id === 'new') ? true : false\n            }\n            key={generateKeyHash()}\n          />\n        )\n      }\n      default: {\n        return (\n          <Field\n            type={'text'}\n            label={field.label}\n            name={fieldName}\n            onChange={handleChange}\n            value={dataModel.values[fieldName]}\n            className={'col-lg-6 col-md-12'}\n            readOnly={\n              thisFieldInfo.readonly && !(props.id === 'new') ? true : false\n            }\n            key={generateKeyHash()}\n          />\n        )\n      }\n    }\n  })\n\n  return (\n    <div>\n      {errors}\n      <button\n        className='btn btn-danger float-right ml-1'\n        onClick={handleDelete}\n      >\n        Delete\n      </button>\n      <button className='btn btn-primary float-right' onClick={handleSubmit}>\n        {props.id === 'new' ? 'Create' : 'Save'}\n      </button>\n      <h4>{'General Information'}</h4>\n      <hr />\n      <form className='form-row' name='generalInformation'>\n        {displayFields}\n      </form>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useState, useEffect } from 'react'\n\nimport { TowelRecord } from '../lib/API'\nimport Pills, { IPillProps, IPillBody } from '../common/PillLayout'\nimport { IFormDetails, FormValue } from '../types/forms'\nimport { Loading } from '../common/Loading'\nimport { getFormDetails } from '../lib/formLoader'\nimport FieldForm from './FieldForm'\nimport { IDictionary } from '../types/server'\nimport { RouteComponentProps } from 'react-router'\n\nexport interface IDataModel {\n  values: IDictionary<any>\n  fields: string[]\n}\n\n// Used for special forms\ntype ICustomForm = React.LazyExoticComponent<\n  React.ComponentType<any>\n  // (props: any) => JSX.Element\n>\n\nexport default function Form(\n  props: RouteComponentProps<{ table: string; id: string }>\n) {\n  // @ts-ignore\n  window.Form = Form\n\n  // Define the state variables\n  // let CustomForm: React.LazyExoticComponent<\n  //   // React.FunctionComponent<any>\n  //   (props: any) => JSX.Element\n  // > | null = null\n\n  const [CustomForm, setCustomForm]: [\n    any,\n    React.Dispatch<React.SetStateAction<any>>\n  ] = useState(null)\n\n  // Store the pill bodies\n  const [pills, setPills]: [IPillProps, React.Dispatch<IPillProps>] = useState(\n    {}\n  )\n\n  const reloadForm = () => {\n    const tableName = props.match.params.table\n    if (tableName) {\n      getFormDetails(tableName).then(\n        ([formDetails, parsedForm]: [\n          IFormDetails?,\n          Promise<{ default: React.ComponentType<any> }>?\n        ]) => {\n          console.log(formDetails)\n          if (!formDetails && parsedForm) {\n            // These forms all return default exports, but it needs to\n            // be explicitly cast that way for TS to know\n            // CustomForm = React.lazy(() => parsedForm)\n            setCustomForm(React.lazy(() => parsedForm))\n            // CustomForm = parsedForm\n            return\n          }\n\n          if (formDetails && Object.keys(formDetails.tabs).length > 0) {\n            // Form tabs come in 3 varieties:\n            // - Form Control\n            // - Table\n            // - CustomComponent\n            const allFormTabs: IPillProps = {}\n\n            Object.keys(formDetails.tabs).forEach((tabId) => {\n              const thisTab = formDetails.tabs[tabId]\n              if (thisTab.fields) {\n                // CustomForm = null\n                setCustomForm(null)\n                allFormTabs[tabId] = {\n                  id: thisTab.name,\n                  label: thisTab.title,\n                  body: (\n                    <FieldForm\n                      primaryKey={thisTab.primaryKey}\n                      id={props.match.params.id}\n                      table={props.match.params.table}\n                      history={props.history}\n                      form={thisTab}\n                    />\n                  )\n                }\n              }\n            })\n\n            setPills(allFormTabs)\n          }\n        }\n      )\n    }\n  }\n\n  // Fetch the form\n  useEffect(reloadForm, [props.match.params.table, props.match.params.id])\n\n  // Refresh data when the id changes\n  // useEffect(() => {\n  //   reloadForm\n  // }, [props.match.params.id])\n\n  // if (pills) {\n  // If forms have been initialized, render the form contained in the form state\n  if (CustomForm !== null) {\n    return <CustomForm match={props.match} />\n  } else if (Object.keys(pills).length > 0) {\n    return <Pills pills={pills} />\n  } else {\n    return <Loading />\n  }\n  //   return (\n  //     <div>\n  //       CustomForm !== null ?  : (\n  //       <h3>{form.title || 'd'}</h3>\n  //       {Object.keys(pills).length > 0 && <Pills pills={pills} />})\n  //     </div>\n  //   )\n  // } else {\n  //   // Duh\n  //   return <Loading />\n  // }\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport { Can } from '../common/Can'\nimport FileUpload from '../common/FormControls/FileUpload'\n\ninterface IDashboardState {\n  menus: string[]\n}\n\nexport default class Dashboard extends Component<{}, IDashboardState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      menus: window.THQ.menus || []\n    }\n    document.addEventListener('thq.receivedNav', () => {\n      this.setState({ menus: window.THQ.menus })\n    })\n  }\n  public render() {\n    return (\n      <div className='container-fluid'>\n        <div className='row'>\n          <div className='col-md-8 mt-4'>\n            <div className='card shadow mb-3'>\n              <a href='#'>\n                <div className='card-header bg-goodyear'>\n                  <h4 className='card-title text-light'>Transactions</h4>\n                </div>\n              </a>\n              <div className='card-body bg-light'>\n                <p>\n                  Find everything you need to finalize and manage deliveries or\n                  upload and download data using the TPP POS integration system.\n                </p>\n                <h6>Start a delivery for:</h6>\n                <a className='btn btn-goodyear m-1' href='/delivery/?type=a'>\n                  National Account\n                </a>\n                <a className='btn btn-goodyear m-1' href='/delivery/?type=b'>\n                  Local Government\n                </a>\n                <a className='btn btn-goodyear m-1' href='/delivery/?type=d'>\n                  State Government\n                </a>\n                <Can role='Create-CA-Delivery'>\n                  <a className='btn btn-goodyear m-1' href='/delivery/?type=j'>\n                    CA National Account\n                  </a>\n                </Can>\n                <Can role='View-More'>\n                  <a className='btn btn-goodyear m-1' href='#'>\n                    Deliveries On Hold\n                  </a>\n                  <a className='btn btn-goodyear m-1' href='#'>\n                    Deliveries Sent\n                  </a>\n                  <a className='btn btn-goodyear m-1' href='#'>\n                    Roadside Service Calls\n                  </a>\n                  <a className='btn btn-goodyear m-1' href='#'>\n                    TPP Info\n                  </a>\n                </Can>\n                <button\n                  className='dropdown-toggle btn-goodyear btn text-light mt-1'\n                  id='dropdownacct'\n                  data-toggle='dropdown'\n                  aria-haspopup='true'\n                  aria-expanded='false'\n                >\n                  More...\n                </button>\n                <div className='dropdown-menu' aria-labelledby='dropdownacct'>\n                  <a className='dropdown-item' href='/delivery/?type=c'>\n                    C - Local Price Support\n                  </a>\n                  <a className='dropdown-item' href='/delivery/?type=e'>\n                    E - Federal Government\n                  </a>\n                  <a className='dropdown-item' href='/delivery/?type=f'>\n                    F - Purchase &amp; Resale\n                  </a>\n                  <a className='dropdown-item' href='/delivery/?type=h'>\n                    H - Direct Dealer\n                  </a>\n                </div>\n              </div>\n            </div>\n            <Can if={this.state.menus.indexOf('Tires And Ordering') > -1}>\n              <div className='card shadow mb-3'>\n                <a href='#'>\n                  <div className='card-header bg-info shadow-sm'>\n                    <h4 className='card-title text-light'>Order Tires</h4>\n                  </div>\n                </a>\n                <div className='card-body bg-light'>\n                  <p>\n                    Search tire inventory and determine product availability\n                    using the Tire Finder. Plus, order tires to capitalize on\n                    the selling power of Goodyear®, Dunlop® and Kelly® tires.\n                  </p>\n                  <a className='btn btn-info m-1' href='#'>\n                    Find Tires\n                  </a>\n                  <a className='btn btn-info m-1' href='#'>\n                    Check Order Status\n                  </a>\n                  <a className='btn btn-info m-1' href='#'>\n                    View Tire Price Book\n                  </a>\n                  <a className='btn btn-info m-1' href='#'>\n                    Quotes\n                  </a>\n                </div>\n              </div>\n            </Can>\n            <Can if={this.state.menus.indexOf('Financial') > -1}>\n              <div className='card shadow mb-3'>\n                <a href='#'>\n                  <div className='card-header bg-secondary'>\n                    <h4 className='card-title text-light'>\n                      Financial Information\n                    </h4>\n                  </div>\n                </a>\n                <div className='card-body bg-light'>\n                  <p>\n                    Check your account balance and remit payments. Retrieve\n                    invoices, statements, and Sales Status reports in\n                    Financials.\n                  </p>\n                  <h6>Or view:</h6>\n                  <a className='btn btn-secondary m-1' href='#'>\n                    Invoices\n                  </a>\n                  <a className='btn btn-secondary m-1' href='#'>\n                    Account Payable Summary\n                  </a>\n                  <a className='btn btn-secondary m-1' href='#'>\n                    Account Claim Form\n                  </a>\n                  <a className='btn btn-secondary m-1' href='#'>\n                    Ultimate Purchaser Certificate\n                  </a>\n                </div>\n              </div>\n            </Can>\n            <Can if={this.state.menus.indexOf('Dealer Programs') > -1}>\n              <div className='card mb-3 mb-4'>\n                <a href='#'>\n                  <div className='card-header bg-warning'>\n                    <h4 className='card-title text-dark'>Dealer Programs</h4>\n                  </div>\n                </a>\n                <div className='card-body bg-light'>\n                  <p>\n                    Access valuable information and documents designed to help\n                    you effectively manage your business while supporting\n                    National Accounts and Government Sales customers.\n                  </p>\n                  <a className='btn btn-warning m-1' href='#'>\n                    Service Price Book\n                  </a>\n                  <a className='btn btn-warning m-1' href='#'>\n                    Government Approval Info\n                  </a>\n                  <a className='btn btn-warning m-1' href='#'>\n                    View Online Orders\n                  </a>\n                </div>\n              </div>\n            </Can>\n          </div>\n          <div className='col-md-4'>\n            <div className='card mt-4 h-50'>\n              <div className='card-body'>\n                <h4 className='card-title'>Sales Stats</h4>\n                <div className='row'>\n                  <div className='col-9'>\n                    <p className='text-left'>Deliveries MTD:</p>\n                    <p className='text-left'>ECommerce Deliveries:</p>\n                  </div>\n                  <div className='col-3'>\n                    <p className='text-right'>5</p>\n\n                    <p className='text-right'>105</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {/* <div className='card mt-4 h-50'>\n              <div className='card-header bg-gold'>\n                <h4 className='card-title'>News</h4>\n              </div>\n              <div className='card-body bg-darkish'>\n                <div\n                  id='news-carousel'\n                  className='carousel'\n                  data-ride='carousel'\n                >\n                  <div className='carousel-inner'>\n                    <div className='carousel-item active'>\n                      <a href='#'>\n                        <img\n                          className='d-block w-100'\n                          src='public/images/tirehub.png'\n                          alt='TireHub News'\n                        />\n                      </a>\n                    </div>\n\n                    <div className='carousel-item'>\n                      <a href='#'>\n                        <img\n                          className='d-block w-100'\n                          src='public/images/logo.png'\n                          alt='THQ'\n                        />\n                      </a>\n                    </div>\n\n                    <div className='carousel-item' />\n                  </div>\n\n                  <a\n                    className='carousel-control-prev'\n                    href='#news-carousel'\n                    role='button'\n                    data-slide='prev'\n                  >\n                    <span\n                      className='carousel-control-prev-icon'\n                      aria-hidden='true'\n                    />\n                    <span className='sr-only'>Previous</span>\n                  </a>\n                  <a\n                    className='carousel-control-next'\n                    href='#news-carousel'\n                    role='button'\n                    data-slide='next'\n                  >\n                    <span\n                      className='carousel-control-next-icon text-dark'\n                      aria-hidden='true'\n                    />\n                    <span className='sr-only'>Next</span>\n                  </a>\n                </div>\n              </div>\n            </div> */}\n          </div>\n        </div>\n        <FileUpload\n          name='test_upload'\n          addAdditional={true}\n          destination='/api'\n        />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport { fetchLogin } from '../lib/getNavigation'\nimport { Can } from '../common/Can'\nimport { Link } from 'react-router-dom'\nimport { generateKeyHash } from '../lib/util'\n\ninterface INavigationLink {\n  href: string\n  innerText: string\n}\n\ninterface INavigationHeadingProps {\n  links: INavigationLink[]\n  header: string\n}\n\nfunction NavigationHeading(props: INavigationHeadingProps) {\n  const links: JSX.Element[] = []\n  let key = 0\n  for (const navLink of props.links) {\n    const uniqueKey = key + 10 * Date.now()\n    links.push(\n      <Link\n        className='dropdown-item'\n        to={navLink.href}\n        key={'nav-link-unique-' + uniqueKey.toString()}\n      >\n        {navLink.innerText}\n      </Link>\n    )\n    key++\n  }\n  return (\n    <div className='col'>\n      <div className='dropdown-header'>{props.header}</div>\n      {links}\n    </div>\n  )\n}\n\nfunction NavigationDropdown(props: any) {\n  return (\n    <li className='nav-item dropdown'>\n      <a\n        className='nav-link text-light dropdown-toggle pl-3'\n        href='#'\n        id={generateKeyHash()}\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n        role='button'\n      >\n        <h5>{props.navTitle}</h5>\n      </a>\n      <div className='dropdown-menu' aria-labelledby={generateKeyHash()}>\n        <div className='row flex-lg-nowrap'>\n          {Object.keys(props.navHeading).map((heading) => {\n            return (\n              <NavigationHeading\n                header={heading}\n                links={props.navHeading[heading]}\n                key={generateKeyHash()}\n              />\n            )\n          })}\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default class Navigation extends Component<any, any> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      nav: null,\n      loaded: false\n    }\n    this.getNav()\n  }\n\n  private getNav() {\n    fetchLogin()\n      .then((navigation: any) => {\n        if (navigation.error) {\n          console.error(navigation.error)\n        }\n        this.setState({ nav: navigation, loaded: true })\n      })\n      .catch((err) => {\n        console.error(err)\n        this.setState({ nav: 'Error', loaded: true })\n      })\n  }\n\n  public render() {\n    if (\n      this.state.nav === null ||\n      this.state.nav === undefined ||\n      this.state.loaded !== true\n    ) {\n      return null\n    } else {\n      const menus: JSX.Element[] = []\n      Object.keys(this.state.nav).map((menu, key) => {\n        menus.push(\n          <NavigationDropdown\n            navHeading={this.state.nav[menu]}\n            navTitle={menu}\n            key={'nav-dropdown-' + key}\n          />\n        )\n      })\n      return (\n        <nav className='navbar navbar-expand-lg navbar-dark bg-goodyear'>\n          <Link className='navbar-brand' to='/'>\n            <img src='/public/images/logo.png' height='60px' />\n          </Link>\n          <button\n            className='navbar-toggler'\n            type='button'\n            data-toggle='collapse'\n            data-target='#mainNav'\n            aria-controls='main-nav'\n            aria-expanded='false'\n            aria-label='Toggle navigation'\n          >\n            <span className='navbar-toggler-icon' />\n          </button>\n\n          <div className='collapse navbar-collapse' id='mainNav'>\n            <ul className='mr-auto navbar-nav' id='menuContainer'>\n              {menus}\n            </ul>\n            <ul className='navbar-nav'>\n              <li className='nav-item dropdown' key='user-menu'>\n                <a\n                  className='dropdown-toggle pl-3 nav-item ml-auto'\n                  data-toggle='dropdown'\n                  id='account'\n                  aria-haspopup='true'\n                  aria-expanded='false'\n                >\n                  <img\n                    className='rounded-circle img'\n                    src='/public/images/account.png'\n                  />\n                </a>\n                <div\n                  className='dropdown-menu dropdown-menu-right'\n                  aria-labelledby='account'\n                >\n                  <Link className='dropdown-item' to='/changeCustomer'>\n                    {'Change Customer'}\n                  </Link>\n                  <Can role={'User-Admin'}>\n                    <Link className='dropdown-item' to='/userAdministration'>\n                      {'User Administration'}\n                    </Link>\n                  </Can>\n                  <Link className='dropdown-item' to='/profile'>\n                    {'Profile'}\n                  </Link>\n                  <a className='dropdown-item' href='#'>\n                    {'French'}\n                  </a>\n                  <a className='dropdown-item' href='/auth/logout'>\n                    {'Logout'}\n                  </a>\n                </div>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      )\n    }\n  }\n}\n","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"body {\\n  margin: 0;\\n  padding: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\", \"\"]);\n\n// exports\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n// import * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","import { ITHQWindowNamespace } from '../typings'\nimport { IAPIGETResponse } from '../types/api'\nimport { IDictionary } from '../types/server'\n\ndeclare global {\n  interface Window {\n    MonacoEnvironment: any\n    $: JQuery\n    THQ: ITHQWindowNamespace\n  }\n}\n\ninterface IAPIResponse {\n  errors?: [\n    {\n      message: string\n      field?: string\n    }\n  ]\n  warnings?: [\n    {\n      message: string\n      field?: string\n    }\n  ]\n  info?: [\n    {\n      message: string\n    }\n  ]\n  data?: {\n    [table: string]: {\n      [column: string]: string\n    }\n  }\n  meta?: {\n    from: number\n    to: number\n  }\n  success: boolean\n}\n\nfunction makeFetchRequest(\n  uri: string,\n  init?: RequestInit\n): Promise<IAPIResponse> {\n  return new Promise((resolveRequest, rejectRequest) => {\n    fetch(uri, init)\n      .then((res: Response) => {\n        if (init && init.method === 'DELETE') {\n          const error = res.headers.get('Error_Record')\n          if (error) {\n            resolveRequest({\n              success: false,\n              errors: [\n                {\n                  message: error\n                }\n              ]\n            })\n          } else {\n            resolveRequest({\n              success: true\n            })\n          }\n\n          return\n        }\n        return res.json()\n      })\n      .then(resolveRequest)\n      .catch(rejectRequest)\n  })\n}\n\nfunction flattenQuery(queryObject?: any) {\n  const queryStringArray = [`token=${window.THQ.token || ''}`]\n  if (queryObject && typeof queryObject === 'object') {\n    Object.keys(queryObject).map((queryKey) => {\n      queryStringArray.push(\n        `${queryKey}=${encodeURIComponent(queryObject[queryKey])}`\n      )\n    })\n  } else if (queryObject) {\n    queryStringArray.push(queryObject)\n  }\n  return queryStringArray.join('&')\n}\n\nconst API = {\n  // Define constants\n  TABLE: '/api/q/',\n  post: ({\n    path,\n    query,\n    body\n  }: {\n    path: string\n    query?: { [key: string]: string }\n    body: { [key: string]: string }\n  }) => {\n    const authPath = path + '?' + flattenQuery(query)\n    console.log('Making POST request to ' + authPath)\n\n    return new Promise((resolve, reject) => {\n      makeFetchRequest(authPath, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(body)\n      })\n        .then((data: IAPIResponse) => {\n          resolve(data)\n        })\n        .catch(reject)\n    })\n  },\n\n  get: (\n    {\n      path,\n      query\n    }: {\n      path: string\n      query?: object\n    },\n    cb?: void\n  ): any => {\n    const authPath = path + '?' + flattenQuery(query)\n    console.log('Making GET request to ' + authPath)\n    return new Promise((resolve, reject) => {\n      makeFetchRequest(authPath, {\n        headers: {\n          Accept: 'application/json'\n        },\n        method: 'GET'\n      })\n        .then((data: IAPIResponse) => {\n          resolve(data)\n        })\n        .catch((err) => {\n          throw err\n        })\n    })\n  },\n\n  /**\n   * @param {string} path URL to make request to\n   * @param {object} query Query string parameters in object format\n   * @param {object} body Body of update parameters\n   */\n  put: ({ path, query, body }: { path: string; query: string; body: any }) => {\n    const authPath = path + '?' + flattenQuery(query)\n\n    return new Promise((resolve, reject) => {\n      fetch(authPath, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'PUT',\n        body: JSON.stringify(body)\n      })\n        .then((res: Response) => {\n          if (res.ok && res.status === 204) {\n            resolve()\n          } else {\n            reject(new Error('Update failed'))\n          }\n        })\n        .catch(reject)\n    })\n  },\n  /**\n   * @param {string} path URL to make request to\n   * @param {object} query Query string parameters in object format\n   * @param {object} body Body of update parameters\n   */\n  patch: ({\n    path,\n    query,\n    body\n  }: {\n    path: string\n    query?: object\n    body?: any\n  }) => {\n    const authPath = path + '?' + flattenQuery(query)\n    return new Promise((resolve, reject) => {\n      makeFetchRequest(authPath, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'PATCH',\n        body: JSON.stringify(body)\n      })\n        .then((data: IAPIResponse) => {\n          resolve(data)\n        })\n        .catch((err) => {\n          throw err\n        })\n    })\n  },\n\n  del: (path: string, query?: IDictionary<string>): Promise<IAPIResponse> => {\n    const authPath = path + '?' + flattenQuery(query)\n    // return new Promise((resolve, reject) => {\n    return makeFetchRequest(authPath, {\n      method: 'DELETE'\n    })\n    //     .then(resolve)\n    //     .catch(reject)\n    // })\n  }\n}\n\nexport class TowelRecord {\n  private tableName: string\n  private id: string\n\n  constructor(table: string) {\n    this.tableName = table\n    this.id = ''\n  }\n\n  public async update(sysId: string, body: any) {\n    return new Promise((resolve) => {\n      this.id = sysId\n      if (this.tableName && this.tableName.endsWith('_list')) {\n        this.tableName = this.tableName.slice(0, -5)\n      }\n\n      if (!sysId) {\n        throw new Error('Missing id to update record')\n      }\n      API.patch({\n        path: `/api/q/${this.tableName}/${this.id}`,\n        body\n      })\n        .then((response) => {\n          console.log(response)\n          resolve(response)\n        })\n        .catch((err) => {\n          console.error(err)\n          resolve({\n            error: err\n          })\n        })\n    })\n  }\n\n  public async delete(id: string) {\n    return new Promise((resolve) => {\n      API.del('/api/q/' + this.tableName + '/' + id)\n        .then((res) => {\n          resolve(res)\n        })\n        .catch((err) => {\n          resolve({\n            error: err\n          })\n        })\n    })\n  }\n\n  public async get({\n    fields,\n    args,\n    id\n  }: {\n    fields?: string[] | string\n    args?: object\n    id?: string\n  }): Promise<IAPIGETResponse<any>> {\n    return new Promise((resolve, reject) => {\n      if (id && this.tableName.endsWith('_list')) {\n        this.tableName = this.tableName.slice(0, -5)\n      }\n      const path = id\n        ? `/api/q/${this.tableName}/${id}`\n        : `/api/q/${this.tableName}`\n      API.get({\n        path,\n        query: {\n          fields,\n          args\n        }\n      })\n        .then((res: IAPIGETResponse<any>) => {\n          return resolve(res)\n        })\n        .catch((err: Error) => {\n          console.error(err)\n          return reject({\n            error: err\n          })\n        })\n    })\n  }\n\n  public create(body: any, fields?: any) {\n    return new Promise((resolve) => {\n      API.post({\n        path: '/api/q/' + this.tableName,\n        body,\n        query: {\n          fields: fields || ''\n        }\n      })\n        .then((res) => {\n          resolve(res)\n        })\n        .catch((err) => {\n          resolve({\n            error: err\n          })\n        })\n    })\n  }\n}\n\nexport default API\n","import * as React from 'react'\n\nimport API from './API'\nimport { IFormDetails } from '../types/forms'\nimport { IAPIGETResponse } from '../types/api'\nimport { IDictionary } from '../types/server'\n\n// const Hook = React.lazy(() => import('../admin/Hook'))\n// const UserProfile = React.lazy(() => import('../home/UserProfile'))\n// const Column = React.lazy(() => import('../admin/Column'))\n\n// Retrieve the form details for a specific table\n\nexport function getFormDetails(\n  formName\n): Promise<[IFormDetails?, Promise<{ default: any }>?]> {\n  return new Promise((resolveFormDetails, rejectFormDetails) => {\n    // Store tsx forms in this object\n    // const specialForms: {[formName: string]: React.LazyExoticComponent} = {\n    //   sys_user: UserProfile,\n    //   sys_db_dictionary: Column,\n    //   // sys_db_object: TableModifier,\n    //   sys_db_hook: Hook\n    // }\n\n    const specialForms: IDictionary<string> = {\n      // sys_user: '../admin/Hook',\n      sys_db_dictionary: '../admin/Column',\n      // sys_db_object: TableModifier,\n      sys_db_hook: '../admin/Hook'\n    }\n\n    const specialFormLoader = (specialFormName: string): Promise<any> => {\n      switch (specialFormName) {\n        // case 'sys_user': {\n        //   return import('../home/UserProfile')\n        // }\n        case 'sys_db_dictionary': {\n          return import('../admin/Column')\n        }\n\n        case 'sys_db_hook': {\n          return import('../admin/Hook')\n        }\n        default: {\n          // This should never happen\n          return import('../common/Errors')\n        }\n      }\n    }\n    // Dynamically load special forms\n    if (formName in specialForms) {\n      return resolveFormDetails([undefined, specialFormLoader(formName)])\n      // specialForms[formName]\n      //   .then((form: { default: React.FunctionComponentFactory<any> }) => {\n      //     return resolveFormDetails(React.lazy)\n      //   })\n      //   .catch(rejectFormDetails)\n      // return resolveFormDetails([undefined, specialForms[formName]])\n    } else {\n      API.get({ path: '/api/describe/form/' + formName })\n        .then((formDetails: IAPIGETResponse<IFormDetails>) => {\n          return resolveFormDetails([formDetails.data])\n        })\n        .catch(rejectFormDetails)\n    }\n  })\n}\n","function fetchLogin() {\n  return new Promise((resolve, reject) => {\n    const token = window.THQ.token || ''\n    const details = JSON.parse(atob(token.split('.')[1]))\n    window.THQ.user = details\n    if (\n      details.userId === window.localStorage.getItem('userId') &&\n      window.localStorage.navigation &&\n      (window.THQ.user.privs && window.THQ.user.privs.length > 0)\n    ) {\n      let event\n      if (typeof Event === 'function') {\n        event = new Event('thq.receivedNav')\n      } else {\n        event = document.createEvent('Event')\n        event.initEvent('thq.receivedNav', true, true)\n      }\n      document.dispatchEvent(event)\n      resolve(JSON.parse(window.localStorage.navigation))\n    } else {\n      window.localStorage.setItem('userId', details.userId)\n      $.ajax('/api/navigation?token=' + token, {\n        xhrFields: {\n          withCredentials: true\n        },\n        success: (response) => {\n          if (!response.error) {\n            const menus = formatNavigation(response.details.navigation)\n            window.THQ.user.privs = response.details.roles\n            window.localStorage.setItem('navigation', JSON.stringify(menus))\n            let event\n            if (typeof Event === 'function') {\n              event = new Event('thq.receivedNav')\n            } else {\n              event = document.createEvent('Event')\n              event.initEvent('thq.receivedNav', true, true)\n            }\n            document.dispatchEvent(event)\n            resolve(menus)\n          } else {\n            throw new Error(response.error)\n          }\n        },\n        error: (err) => {\n          alert(err)\n          throw err\n        }\n      })\n    }\n  })\n}\n\nfunction formatNavigation(navigationLinks) {\n  const menus = {}\n  for (const link of navigationLinks) {\n    if (!menus[link.menu]) {\n      menus[link.menu] = {}\n    }\n    if (!Array.isArray(menus[link.menu][link.header])) {\n      menus[link.menu][link.header] = []\n    }\n    menus[link.menu][link.header].push({\n      href: link.href,\n      innerText: link.inner_text\n    })\n  }\n  window.THQ.menus = Object.keys(menus)\n  return menus\n}\n\nexport { fetchLogin }\n","/**\n * Generates a random hash. By default will return 6 alpha-numeric chars.\n * @param length Optional parameter representing length of hash\n */\nexport function generateKeyHash(length: number = 6) {\n  let result: string = ''\n  const characters: string =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  const charactersLength: number = characters.length\n  for (var i = 1; i <= length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\n\n/**\n * Do nothing\n */\nexport function noop() {}\n","module.exports = React;","module.exports = ReactDOM;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAYA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAVA;AAWA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;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;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AALA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAaA;AACA;AACA;AAHA;AAZA;AAAA;AAAA;AACA;AADA;AAsBA;AACA;AAAA;AAAA;AAAA;AAFA;AArBA;AAAA;AAAA;AACA;AAyBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAC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AAEA;;;;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AAHA;AAKA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAKA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAHA;AAKA;AACA;AAvSA;AAAA;AAAA;AA0SA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;AAjTA;AAAA;AAAA;AAsTA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AApUA;AAAA;AAAA;AA2UA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AApWA;AAAA;AAAA;AAyWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;AA9XA;AAAA;AAAA;AAuYA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAFA;AAUA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAAA;AAAA;AAAA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAzcA;AAAA;AAAA;AA8cA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAvdA;AAAA;AAAA;AA0dA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AA7nBA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;AC1EA;AAEA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9IA;AACA;AAEA;AACA;AACA;AAsBA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAXA;AAiBA;AACA;AAtBA;AAAA;AAAA;AAwBA;AACA;AAAA;AACA;AACA;AA3BA;AAAA;AAAA;AA8BA;AACA;AACA;AACA;AAjCA;AAAA;AAAA;AAmCA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AA7GA;AACA;AADA;AAAA;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;ACFA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AAKA;AAuBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAGA;AAHA;AAKA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;ACnFA;AACA;AAiBA;;;;AAIA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AADA;AAIA;AACA;AADA;AAMA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;AC7DA;AACA;AAYA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAQA;AACA;AAVA;AAYA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AACA;AADA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;;;;;;;;;;;;;;ACraA;;;;;;;;;;;;;;;;;;;;;;AC3EA;AAWA;AACA;AAEA;AACA;AAEA;;;;AAKA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAUA;AAtDA;AAwDA;AAEA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAcA;AAFA;AAZA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AAnBA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AACA;AA+BA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAIA;AALA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AACA;AAMA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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AAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;A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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC+BA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AADA;AAHA;AAQA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AASA;AACA;AAEA;AACA;AAEA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;;;;AAKA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAhIA;AAmIA;AAAA;AAAA;AAIA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAlCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAsCA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAhDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAmDA;AAnDA;AA4DA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAqFA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAvGA;AACA;AADA;AAAA;AA0GA;;;;;;;;ACpUA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;ACnEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AACA;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;;;;AAIA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;AAGA;;;;;;;;;;;;;;;AClBA;;;;;;;ACAA;;;;A","sourceRoot":""}