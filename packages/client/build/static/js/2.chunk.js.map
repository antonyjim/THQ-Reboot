{"version":3,"file":"static/js/2.chunk.js","sources":["/var/www/osm/clientApp/src/admin/Column.tsx","/var/www/osm/clientApp/src/admin/ColumnInfo.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Component } from 'react'\nimport Pills from '../common/PillLayout'\nimport { Table } from '../common/Table'\nimport API from '../lib/API'\nimport { ColumnGeneralInformation } from './ColumnInfo'\nimport { IDictionary } from '../types/server'\n\ninterface IColumnInfoState {\n  error: string\n  sys_id: string\n  generalInfo: IDictionary<string | boolean | number>\n  modifiedFields: IDictionary<string | boolean | number>\n  disableSubmit: boolean\n  fields: string[]\n  loaded: boolean\n}\n\nfunction ColumnTables(props: { sys_id: string }) {\n  return (\n    <Table\n      table='sys_db_dictionary_list'\n      args={{ reference_id: props.sys_id }}\n    />\n  )\n}\n\nexport default function Column(props) {\n  // @ts-ignore\n  const [state, setState]: [\n    IColumnInfoState,\n    React.Dispatch<IColumnInfoState>\n  ] = React.useState({\n    error: '',\n    sys_id: props.match.params.id,\n    generalInfo: {},\n    modifiedFields: {},\n    disableSubmit: true,\n    fields: [\n      'sys_id',\n      'column_name',\n      'label',\n      'table_name',\n      'hint',\n      'type',\n      'len',\n      'readonly',\n      'default_view',\n      'nullable',\n      'reference_id',\n      'table_name_display',\n      'reference_id_display',\n      'required_on_update',\n      'required_on_create'\n    ],\n    loaded: props.match.params.id !== 'new' ? false : true\n  })\n\n  function getInfo() {\n    API.get({\n      path: '/api/q/sys_db_dictionary/' + state.sys_id,\n      query: {\n        fields: state.fields.join(',')\n      }\n    })\n      .then((data: any) => {\n        const newState = { ...state }\n        newState.generalInfo = data.data.sys_db_dictionary\n        newState.loaded = true\n        setState(newState)\n      })\n      .catch((e: Error) => {\n        setState({ ...state, error: e.message, loaded: true })\n        console.error(e)\n      })\n  }\n\n  function handleChange(e: React.ChangeEvent) {\n    if (e.target instanceof HTMLInputElement) {\n      const newState = { ...state }\n      newState.disableSubmit = false\n      newState.modifiedFields[e.target.id] = e.target.value\n      newState.fields[e.target.id] = e.target.value\n      setState(newState)\n    }\n  }\n\n  function handleSubmit(e: React.FormEvent) {\n    console.log('submitted')\n  }\n\n  const pills = {\n    general: {\n      id: 'general',\n      label: 'General',\n      body: (\n        <ColumnGeneralInformation\n          info={state.generalInfo}\n          sys_id={state.sys_id}\n          fields={state.fields}\n        />\n      )\n    },\n    ref: {\n      id: 'references',\n      label: 'References',\n      body: <ColumnTables sys_id={state.sys_id} />\n    }\n  }\n\n  React.useEffect(() => {\n    if (props.match.params.id !== 'new') {\n      getInfo()\n    }\n  }, [props.match.params.id])\n  return <>{state.loaded && <Pills pills={pills} {...state} />}</>\n}\n","import * as React from 'react'\nimport { Component } from 'react'\nimport API from '../lib/API'\nimport { Field, Reference, SelectField, Checkbox } from '../common/FormControls'\nimport { IRefUpdate } from '../common/FormControls/Reference'\n\ninterface IColumnGeneralInformationProps {\n  sys_id: string\n  fields: string[]\n  handleErrorMessage: (err: Error) => void\n}\n\ninterface IColumnGeneralInformationState {\n  fields: any\n  sys_id: string\n  modifiedFields: string[]\n  saveDisabled?: { disabled?: string }\n  type?: string\n}\n\nexport class ColumnGeneralInformation extends Component<\n  // IColumnGeneralInformationProps,\n  // IColumnGeneralInformationState\n  any,\n  any\n> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      sys_id: props.sys_id,\n      fields: { ...props.info },\n      modifiedFields: [],\n      saveDisabled: { disabled: 'disabled' }\n    }\n  }\n\n  private handleChange(e: React.ChangeEvent) {\n    if (e.target instanceof HTMLInputElement) {\n      const prevState = { ...this.state }\n      prevState.fields[e.target.id] = e.target.value\n      if (e.target.type === 'checkbox') {\n        prevState.fields[e.target.id] = e.target.checked\n      }\n      if (!prevState.modifiedFields.includes(e.target.id)) {\n        prevState.modifiedFields.push(e.target.id)\n      }\n      prevState.saveDisabled = {}\n      this.setState(prevState)\n    }\n  }\n\n  private setReference(updatedRef: IRefUpdate): void {\n    this.setState({\n      sys_id: this.state.sys_id,\n      fields: {\n        ...this.state.fields,\n        [updatedRef.field]: updatedRef.newValue\n      },\n      modifiedFields: [...this.state.fields],\n      saveDisabled: { ...this.state.disabled }\n    })\n  }\n\n  private handleSubmit() {\n    if (this.props.sys_id === 'new') {\n      this.createNew()\n    } else {\n      const body: any = { sys_id: this.state.sys_id }\n      this.state.modifiedFields.forEach((field: string) => {\n        body[field] = this.state.fields[field]\n      })\n      API.patch({\n        path: '/api/q/sys_db_dictionary/' + this.state.sys_id,\n        body,\n        query: { fields: this.props.fields.join(',') }\n      })\n        .then((res) => {\n          console.log(res)\n        })\n        .catch((err) => {\n          this.props.handleErrorMessage(err)\n        })\n    }\n  }\n\n  private createNew() {\n    API.post({\n      path: '/api/q/sys_db_dictionary',\n      query: {\n        fields: this.props.fields.join(',')\n      },\n      body: this.state.fields\n    })\n      .then((res) => {\n        console.log(res)\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }\n\n  public render() {\n    const dataTypes = ['CHAR', 'VARCHAR', 'INT', 'FLOAT', 'TEXT', 'BOOLEAN']\n    let length = {}\n    let colNameReadonly = {}\n    if (!(this.state.type in ['CHAR', 'VARCHAR'])) {\n      length = { readOnly: 'readonly' }\n    }\n    if (this.props.sys_id !== 'new') colNameReadonly = { readOnly: 'readonly' }\n    return (\n      <>\n        <h4> General Information </h4>\n        <hr />\n        <form className='form-row' name='info'>\n          <input type='hidden' id='sys_id' value={this.state.sys_id} />\n          <Field\n            id='column_name'\n            name='column_name'\n            label='Column Name'\n            value={this.state.fields.column_name}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n            attributes={colNameReadonly}\n            type='text'\n          />\n          <Field\n            id='label'\n            name='label'\n            label='Label'\n            value={this.state.fields.label}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n            type='text'\n          />\n          <Reference\n            id='table_name'\n            name='table_name'\n            label='Table'\n            value={this.state.fields.table_name}\n            display={this.state.fields.table_name_display}\n            setReference={this.setReference}\n            className='col-lg-6 col-md-12'\n            references='sys_db_object'\n          />\n          <Field\n            id='hint'\n            name='hint'\n            label='Hint'\n            value={this.state.fields.hint}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n            type='text'\n          />\n          <SelectField\n            id='type'\n            label='Data Type'\n            value={this.state.fields.type}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n            opts={dataTypes}\n          />\n          <Field\n            id='len'\n            name='len'\n            label='Length'\n            value={this.state.fields.len}\n            onChange={this.handleChange.bind(this)}\n            attributes={length}\n            className='col-lg-6 col-md-12'\n            type='number'\n          />\n          <Reference\n            id='reference_id'\n            name='reference_id'\n            label='References'\n            value={this.state.fields.reference_id}\n            display={this.state.fields.reference_id_display}\n            setReference={this.setReference}\n            className='col-lg-6 col-md-12'\n            references='sys_db_dictionary'\n          />\n          <Field\n            id='enum'\n            name='enum'\n            label='Enum'\n            value={this.state.fields.enum}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n            type='text'\n          />\n          <Field\n            id='col_order'\n            name='col_order'\n            label='Col Order'\n            value={this.state.fields.col_order}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n            type='number'\n          />\n          <Checkbox\n            id='readonly'\n            name='readonly'\n            label='Readonly'\n            checked={this.state.fields.readonly}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n          />\n          <Checkbox\n            id='nullable'\n            name='nullable'\n            label='Nullable'\n            checked={this.state.fields.nullable}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n          />\n          <Checkbox\n            id='update_key'\n            name='update_key'\n            label='Primary Key'\n            checked={this.state.fields.update_key}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n          />\n          <Checkbox\n            id='default_view'\n            name='default_view'\n            label='Show as Default'\n            checked={this.state.fields.default_view}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n          />\n          <Checkbox\n            id='visible'\n            name='visible'\n            label='Show On Forms'\n            checked={this.state.fields.visible}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n          />\n          <Checkbox\n            id='required_on_create'\n            name='required_on_create'\n            label='Require For Creation'\n            checked={this.state.fields.required_on_create}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n          />\n          <Checkbox\n            id='required_on_update'\n            name='required_on_update'\n            label='Require For Update'\n            checked={this.state.fields.required_on_update}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n          />\n          <Checkbox\n            id='display_field'\n            name='display_field'\n            label='Display As Link'\n            value={this.state.fields.display_field}\n            onChange={this.handleChange.bind(this)}\n            className='col-lg-6 col-md-12'\n            checked={this.state.fields.display_field}\n          />\n          <button\n            className='btn btn-primary btn-block submit'\n            onClick={this.handleSubmit.bind(this)}\n            data-form='info'\n            type='button'\n            {...this.state.saveDisabled}\n          >\n            Save\n          </button>\n        </form>\n      </>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAYA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAvBA;AALA;AAAA;AAAA;AACA;AA8BA;AACA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAZA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AAiBA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAFA;AAQA;AACA;AAfA;AAAA;AAAA;AAiBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAgCA;AACA;AACA;AAIA;AACA;AAPA;AASA;AAzCA;AAAA;AAAA;AA2CA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AA/DA;AAAA;AAAA;AAkEA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;AACA;AAEA;AACA;AACA;AA/EA;AAAA;AAAA;AAkFA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAhQA;AACA;AADA;AAAA;;;;A","sourceRoot":""}